/* automatically generated by rust-bindgen */

pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
pub struct Union_Unnamed1 {
    pub data: [u64, ..16u],
}
impl Union_Unnamed1 {
    pub fn __mbstate8(&mut self) -> *mut [::libc::c_char, ..128u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = int64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::libc::c_ulong;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type user64_addr_t = __uint64_t;
pub type user64_size_t = __uint64_t;
pub type user64_ssize_t = __int64_t;
pub type user64_long_t = __int64_t;
pub type user64_ulong_t = __uint64_t;
pub type user64_time_t = __int64_t;
pub type user64_off_t = __int64_t;
pub type user32_addr_t = __uint32_t;
pub type user32_size_t = __uint32_t;
pub type user32_ssize_t = __int32_t;
pub type user32_long_t = __int32_t;
pub type user32_ulong_t = __uint32_t;
pub type user32_time_t = __int32_t;
pub type user32_off_t = __int64_t;
pub type syscall_arg_t = u_int64_t;
pub type uint8_t = u_int8_t;
pub type uint16_t = u_int16_t;
pub type uint32_t = u_int32_t;
pub type uint64_t = u_int64_t;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intmax_t = ::libc::c_longlong;
pub type uintmax_t = ::libc::c_ulonglong;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __uint32_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar, ..16u];
pub type __darwin_uuid_string_t = [::libc::c_char, ..37u];
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::libc::c_char;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = __darwin_size_t;
pub type ssize_t = __darwin_ssize_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::libc::c_int;
#[repr(C)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t, ..32u],
}
pub type fd_set = Struct_fd_set;
pub type fd_mask = __int32_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type UInt8 = ::libc::c_uchar;
pub type SInt8 = ::libc::c_char;
pub type UInt16 = ::libc::c_ushort;
pub type SInt16 = ::libc::c_short;
pub type UInt32 = ::libc::c_uint;
pub type SInt32 = ::libc::c_int;
#[repr(C)]
pub struct Struct_wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
pub type wide = Struct_wide;
#[repr(C)]
pub struct Struct_UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
pub type UnsignedWide = Struct_UnsignedWide;
pub type SInt64 = ::libc::c_longlong;
pub type UInt64 = ::libc::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::libc::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = ::libc::c_float;
pub type Float64 = ::libc::c_double;
#[repr(C)]
pub struct Struct_Float80 {
    pub exp: SInt16,
    pub man: [UInt16, ..4u],
}
pub type Float80 = Struct_Float80;
#[repr(C)]
pub struct Struct_Float96 {
    pub exp: [SInt16, ..2u],
    pub man: [UInt16, ..4u],
}
pub type Float96 = Struct_Float96;
#[repr(C)]
pub struct Struct_Float32Point {
    pub x: Float32,
    pub y: Float32,
}
pub type Float32Point = Struct_Float32Point;
pub type Ptr = *mut ::libc::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::libc::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::libc::c_void;
pub type ConstLogicalAddress = *const ::libc::c_void;
pub type PhysicalAddress = *mut ::libc::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::libc::c_ulong;
pub type ByteOffset = ::libc::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::libc::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::libc::c_uchar;
pub type ProcPtr = ::std::option::Option<extern "C" fn() -> ::libc::c_long>;
pub type Register68kProcPtr = ::std::option::Option<extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::libc::c_void;
pub type URefCon = *mut ::libc::c_void;
pub type SRefCon = *mut ::libc::c_void;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const noErr: ::libc::c_uint = 0;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const kNilOptions: ::libc::c_uint = 0;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const kVariableLengthArray: ::libc::c_uint = 1;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const kUnknownType: ::libc::c_uint = 1061109567;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::libc::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::libc::c_uchar, ..256u];
pub type Str63 = [::libc::c_uchar, ..64u];
pub type Str32 = [::libc::c_uchar, ..33u];
pub type Str31 = [::libc::c_uchar, ..32u];
pub type Str27 = [::libc::c_uchar, ..28u];
pub type Str15 = [::libc::c_uchar, ..16u];
pub type Str32Field = [::libc::c_uchar, ..34u];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::libc::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::libc::c_uchar;
pub type ConstStr255Param = *const ::libc::c_uchar;
pub type ConstStr63Param = *const ::libc::c_uchar;
pub type ConstStr32Param = *const ::libc::c_uchar;
pub type ConstStr31Param = *const ::libc::c_uchar;
pub type ConstStr27Param = *const ::libc::c_uchar;
pub type ConstStr15Param = *const ::libc::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C)]
pub struct Struct_ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
pub type ProcessSerialNumber = Struct_ProcessSerialNumber;
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
pub struct Struct_Point {
    pub v: ::libc::c_short,
    pub h: ::libc::c_short,
}
pub type Point = Struct_Point;
pub type PointPtr = *mut Point;
#[repr(C)]
pub struct Struct_Rect {
    pub top: ::libc::c_short,
    pub left: ::libc::c_short,
    pub bottom: ::libc::c_short,
    pub right: ::libc::c_short,
}
pub type Rect = Struct_Rect;
pub type RectPtr = *mut Rect;
#[repr(C)]
pub struct Struct_FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
pub type FixedPoint = Struct_FixedPoint;
#[repr(C)]
pub struct Struct_FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
pub type FixedRect = Struct_FixedRect;
pub type CharParameter = ::libc::c_short;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const normal: ::libc::c_uint = 0;
pub const bold: ::libc::c_uint = 1;
pub const italic: ::libc::c_uint = 2;
pub const underline: ::libc::c_uint = 4;
pub const outline: ::libc::c_uint = 8;
pub const shadow: ::libc::c_uint = 16;
pub const condense: ::libc::c_uint = 32;
pub const extend: ::libc::c_uint = 64;
pub type Style = ::libc::c_uchar;
pub type StyleParameter = ::libc::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
pub enum Struct_TimeBaseRecord { }
pub type TimeBase = *mut Struct_TimeBaseRecord;
#[repr(C)]
pub struct Struct_TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
pub type TimeRecord = Struct_TimeRecord;
#[repr(C)]
pub struct Struct_NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
pub type NumVersion = Struct_NumVersion;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const developStage: ::libc::c_uint = 32;
pub const alphaStage: ::libc::c_uint = 64;
pub const betaStage: ::libc::c_uint = 96;
pub const finalStage: ::libc::c_uint = 128;
#[repr(C)]
pub struct Union_NumVersionVariant {
    pub data: [u16, ..2u],
}
impl Union_NumVersionVariant {
    pub fn parts(&mut self) -> *mut NumVersion {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn whole(&mut self) -> *mut UInt32 {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type NumVersionVariant = Union_NumVersionVariant;
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
pub struct Struct_VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::libc::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
pub type VersRec = Struct_VersRec;
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
pub type CFTypeID = ::libc::c_ulong;
pub type CFOptionFlags = ::libc::c_ulong;
pub type CFHashCode = ::libc::c_ulong;
pub type CFIndex = ::libc::c_long;
pub type CFTypeRef = *const ::libc::c_void;
pub enum Struct___CFString { }
pub type CFStringRef = *const Struct___CFString;
pub type CFMutableStringRef = *mut Struct___CFString;
pub type CFPropertyListRef = CFTypeRef;
pub type CFComparisonResult = CFIndex;
pub type Enum_Unnamed8 = ::libc::c_int;
pub const kCFCompareLessThan: ::libc::c_int = -1;
pub const kCFCompareEqualTo: ::libc::c_int = 0;
pub const kCFCompareGreaterThan: ::libc::c_int = 1;
pub type CFComparatorFunction =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void,
                               arg3: *mut ::libc::c_void)
                              -> CFComparisonResult>;
pub type Enum_Unnamed9 = ::libc::c_int;
pub const kCFNotFound: ::libc::c_int = -1;
#[repr(C)]
pub struct Struct_Unnamed10 {
    pub location: CFIndex,
    pub length: CFIndex,
}
pub type CFRange = Struct_Unnamed10;
pub enum Struct___CFNull { }
pub type CFNullRef = *const Struct___CFNull;
pub enum Struct___CFAllocator { }
pub type CFAllocatorRef = *const Struct___CFAllocator;
pub type CFAllocatorRetainCallBack =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFAllocatorReleaseCallBack =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)>;
pub type CFAllocatorCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)
                              -> CFStringRef>;
pub type CFAllocatorAllocateCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: CFIndex, arg2: CFOptionFlags,
                               arg3: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type CFAllocatorReallocateCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void, arg2: CFIndex,
                               arg3: CFOptionFlags, arg4: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type CFAllocatorDeallocateCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void,
                               arg2: *mut ::libc::c_void)>;
pub type CFAllocatorPreferredSizeCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: CFIndex, arg2: CFOptionFlags,
                               arg3: *mut ::libc::c_void) -> CFIndex>;
#[repr(C)]
pub struct Struct_Unnamed11 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
pub type CFAllocatorContext = Struct_Unnamed11;
pub type CFArrayRetainCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: CFAllocatorRef,
                               arg2: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFArrayReleaseCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: CFAllocatorRef,
                               arg2: *const ::libc::c_void)>;
pub type CFArrayCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)
                              -> CFStringRef>;
pub type CFArrayEqualCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void) -> Boolean>;
#[repr(C)]
pub struct Struct_Unnamed12 {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
pub type CFArrayCallBacks = Struct_Unnamed12;
pub type CFArrayApplierFunction =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *mut ::libc::c_void)>;
pub enum Struct___CFArray { }
pub type CFArrayRef = *const Struct___CFArray;
pub type CFMutableArrayRef = *mut Struct___CFArray;
pub type CFTimeInterval = ::libc::c_double;
pub type CFAbsoluteTime = CFTimeInterval;
pub enum Struct___CFDate { }
pub type CFDateRef = *const Struct___CFDate;
pub enum Struct___CFTimeZone { }
pub type CFTimeZoneRef = *const Struct___CFTimeZone;
#[repr(C)]
pub struct Struct_Unnamed13 {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: ::libc::c_double,
}
pub type CFGregorianDate = Struct_Unnamed13;
#[repr(C)]
pub struct Struct_Unnamed14 {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: ::libc::c_double,
}
pub type CFGregorianUnits = Struct_Unnamed14;
pub type CFGregorianUnitFlags = CFOptionFlags;
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const kCFGregorianUnitsYears: ::libc::c_uint = 1;
pub const kCFGregorianUnitsMonths: ::libc::c_uint = 2;
pub const kCFGregorianUnitsDays: ::libc::c_uint = 4;
pub const kCFGregorianUnitsHours: ::libc::c_uint = 8;
pub const kCFGregorianUnitsMinutes: ::libc::c_uint = 16;
pub const kCFGregorianUnitsSeconds: ::libc::c_uint = 32;
pub const kCFGregorianAllUnits: ::libc::c_uint = 16777215;
pub enum Struct___CFData { }
pub type CFDataRef = *const Struct___CFData;
pub type CFMutableDataRef = *mut Struct___CFData;
pub type CFDataSearchFlags = CFOptionFlags;
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const kCFDataSearchBackwards: ::libc::c_uint = 1;
pub const kCFDataSearchAnchored: ::libc::c_uint = 2;
pub type CFDictionaryRetainCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: CFAllocatorRef,
                               arg2: *const ::libc::c_void)
                              -> *const ::libc::c_void>;
pub type CFDictionaryReleaseCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: CFAllocatorRef,
                               arg2: *const ::libc::c_void)>;
pub type CFDictionaryCopyDescriptionCallBack =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)
                              -> CFStringRef>;
pub type CFDictionaryEqualCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void) -> Boolean>;
pub type CFDictionaryHashCallBack =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)
                              -> CFHashCode>;
#[repr(C)]
pub struct Struct_Unnamed17 {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
pub type CFDictionaryKeyCallBacks = Struct_Unnamed17;
#[repr(C)]
pub struct Struct_Unnamed18 {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
pub type CFDictionaryValueCallBacks = Struct_Unnamed18;
pub type CFDictionaryApplierFunction =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void,
                               arg3: *mut ::libc::c_void)>;
pub enum Struct___CFDictionary { }
pub type CFDictionaryRef = *const Struct___CFDictionary;
pub type CFMutableDictionaryRef = *mut Struct___CFDictionary;
pub enum Struct___CFCharacterSet { }
pub type CFCharacterSetRef = *const Struct___CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut Struct___CFCharacterSet;
pub type CFCharacterSetPredefinedSet = CFIndex;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const kCFCharacterSetControl: ::libc::c_uint = 1;
pub const kCFCharacterSetWhitespace: ::libc::c_uint = 2;
pub const kCFCharacterSetWhitespaceAndNewline: ::libc::c_uint = 3;
pub const kCFCharacterSetDecimalDigit: ::libc::c_uint = 4;
pub const kCFCharacterSetLetter: ::libc::c_uint = 5;
pub const kCFCharacterSetLowercaseLetter: ::libc::c_uint = 6;
pub const kCFCharacterSetUppercaseLetter: ::libc::c_uint = 7;
pub const kCFCharacterSetNonBase: ::libc::c_uint = 8;
pub const kCFCharacterSetDecomposable: ::libc::c_uint = 9;
pub const kCFCharacterSetAlphaNumeric: ::libc::c_uint = 10;
pub const kCFCharacterSetPunctuation: ::libc::c_uint = 11;
pub const kCFCharacterSetCapitalizedLetter: ::libc::c_uint = 13;
pub const kCFCharacterSetSymbol: ::libc::c_uint = 14;
pub const kCFCharacterSetNewline: ::libc::c_uint = 15;
pub const kCFCharacterSetIllegal: ::libc::c_uint = 12;
pub enum Struct___CFLocale { }
pub type CFLocaleRef = *const Struct___CFLocale;
pub type CFLocaleLanguageDirection = CFIndex;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const kCFLocaleLanguageDirectionUnknown: ::libc::c_uint = 0;
pub const kCFLocaleLanguageDirectionLeftToRight: ::libc::c_uint = 1;
pub const kCFLocaleLanguageDirectionRightToLeft: ::libc::c_uint = 2;
pub const kCFLocaleLanguageDirectionTopToBottom: ::libc::c_uint = 3;
pub const kCFLocaleLanguageDirectionBottomToTop: ::libc::c_uint = 4;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type CFStringEncoding = UInt32;
pub type CFStringBuiltInEncodings = CFStringEncoding;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const kCFStringEncodingMacRoman: ::libc::c_uint = 0;
pub const kCFStringEncodingWindowsLatin1: ::libc::c_uint = 1280;
pub const kCFStringEncodingISOLatin1: ::libc::c_uint = 513;
pub const kCFStringEncodingNextStepLatin: ::libc::c_uint = 2817;
pub const kCFStringEncodingASCII: ::libc::c_uint = 1536;
pub const kCFStringEncodingUnicode: ::libc::c_uint = 256;
pub const kCFStringEncodingUTF8: ::libc::c_uint = 134217984;
pub const kCFStringEncodingNonLossyASCII: ::libc::c_uint = 3071;
pub const kCFStringEncodingUTF16: ::libc::c_uint = 256;
pub const kCFStringEncodingUTF16BE: ::libc::c_uint = 268435712;
pub const kCFStringEncodingUTF16LE: ::libc::c_uint = 335544576;
pub const kCFStringEncodingUTF32: ::libc::c_uint = 201326848;
pub const kCFStringEncodingUTF32BE: ::libc::c_uint = 402653440;
pub const kCFStringEncodingUTF32LE: ::libc::c_uint = 469762304;
pub type CFStringCompareFlags = CFOptionFlags;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const kCFCompareCaseInsensitive: ::libc::c_uint = 1;
pub const kCFCompareBackwards: ::libc::c_uint = 4;
pub const kCFCompareAnchored: ::libc::c_uint = 8;
pub const kCFCompareNonliteral: ::libc::c_uint = 16;
pub const kCFCompareLocalized: ::libc::c_uint = 32;
pub const kCFCompareNumerically: ::libc::c_uint = 64;
pub const kCFCompareDiacriticInsensitive: ::libc::c_uint = 128;
pub const kCFCompareWidthInsensitive: ::libc::c_uint = 256;
pub const kCFCompareForcedOrdering: ::libc::c_uint = 512;
pub type CFStringNormalizationForm = CFIndex;
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const kCFStringNormalizationFormD: ::libc::c_uint = 0;
pub const kCFStringNormalizationFormKD: ::libc::c_uint = 1;
pub const kCFStringNormalizationFormC: ::libc::c_uint = 2;
pub const kCFStringNormalizationFormKC: ::libc::c_uint = 3;
#[repr(C)]
pub struct Struct_Unnamed24 {
    pub buffer: [UniChar, ..64u],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::libc::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
pub type CFStringInlineBuffer = Struct_Unnamed24;
pub type boolean_t = ::libc::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::libc::c_int;
pub type vm_offset_t = uintptr_t;
pub type vm_size_t = uintptr_t;
pub type mach_vm_address_t = uint64_t;
pub type mach_vm_offset_t = uint64_t;
pub type mach_vm_size_t = uint64_t;
pub type vm_map_offset_t = uint64_t;
pub type vm_map_address_t = uint64_t;
pub type vm_map_size_t = uint64_t;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub enum Struct_ipc_port { }
pub type ipc_port_t = *mut Struct_ipc_port;
pub type mach_port_t = ipc_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::libc::c_uint;
#[repr(C)]
pub struct Struct_mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
pub type mach_port_status_t = Struct_mach_port_status;
#[repr(C)]
pub struct Struct_mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
pub type mach_port_limits_t = Struct_mach_port_limits;
#[repr(C)]
pub struct Struct_mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [uint32_t, ..6u],
}
pub type mach_port_info_ext_t = Struct_mach_port_info_ext;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::libc::c_int;
#[repr(C)]
pub struct Struct_mach_port_qos {
    pub name: ::libc::c_uint,
    pub prealloc: ::libc::c_uint,
    pub pad1: boolean_t,
    pub len: natural_t,
}
pub type mach_port_qos_t = Struct_mach_port_qos;
#[repr(C)]
pub struct Struct_mach_port_options {
    pub flags: uint32_t,
    pub mpl: mach_port_limits_t,
    pub reserved: [uint64_t, ..2u],
}
pub type mach_port_options_t = Struct_mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub type Enum_mach_port_guard_exception_codes = ::libc::c_uint;
pub const kGUARD_EXC_DESTROY: ::libc::c_uint = 1;
pub const kGUARD_EXC_MOD_REFS: ::libc::c_uint = 2;
pub const kGUARD_EXC_SET_CONTEXT: ::libc::c_uint = 4;
pub const kGUARD_EXC_UNGUARDED: ::libc::c_uint = 8;
pub const kGUARD_EXC_INCORRECT_GUARD: ::libc::c_uint = 16;
pub type port_t = mach_port_t;
pub type port_name_t = mach_port_name_t;
pub type port_name_array_t = *mut mach_port_name_t;
pub enum Struct___CFRunLoop { }
pub type CFRunLoopRef = *mut Struct___CFRunLoop;
pub enum Struct___CFRunLoopSource { }
pub type CFRunLoopSourceRef = *mut Struct___CFRunLoopSource;
pub enum Struct___CFRunLoopObserver { }
pub type CFRunLoopObserverRef = *mut Struct___CFRunLoopObserver;
pub enum Struct___CFRunLoopTimer { }
pub type CFRunLoopTimerRef = *mut Struct___CFRunLoopTimer;
pub type Enum_Unnamed25 = ::libc::c_uint;
pub const kCFRunLoopRunFinished: ::libc::c_uint = 1;
pub const kCFRunLoopRunStopped: ::libc::c_uint = 2;
pub const kCFRunLoopRunTimedOut: ::libc::c_uint = 3;
pub const kCFRunLoopRunHandledSource: ::libc::c_uint = 4;
pub type CFRunLoopActivity = CFOptionFlags;
pub type Enum_Unnamed26 = ::libc::c_uint;
pub const kCFRunLoopEntry: ::libc::c_uint = 1;
pub const kCFRunLoopBeforeTimers: ::libc::c_uint = 2;
pub const kCFRunLoopBeforeSources: ::libc::c_uint = 4;
pub const kCFRunLoopBeforeWaiting: ::libc::c_uint = 32;
pub const kCFRunLoopAfterWaiting: ::libc::c_uint = 64;
pub const kCFRunLoopExit: ::libc::c_uint = 128;
pub const kCFRunLoopAllActivities: ::libc::c_uint = 268435455;
#[repr(C)]
pub struct Struct_Unnamed27 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn
                                          (arg1: *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn
                                           (arg1: *const ::libc::c_void)>,
    pub copyDescription: ::std::option::Option<extern "C" fn
                                                   (arg1:
                                                        *const ::libc::c_void)
                                                   -> CFStringRef>,
    pub equal: ::std::option::Option<extern "C" fn
                                         (arg1: *const ::libc::c_void,
                                          arg2: *const ::libc::c_void)
                                         -> Boolean>,
    pub hash: ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)
                                        -> CFHashCode>,
    pub schedule: ::std::option::Option<extern "C" fn
                                            (arg1: *mut ::libc::c_void,
                                             arg2: CFRunLoopRef,
                                             arg3: CFStringRef)>,
    pub cancel: ::std::option::Option<extern "C" fn
                                          (arg1: *mut ::libc::c_void,
                                           arg2: CFRunLoopRef,
                                           arg3: CFStringRef)>,
    pub perform: ::std::option::Option<extern "C" fn
                                           (arg1: *mut ::libc::c_void)>,
}
pub type CFRunLoopSourceContext = Struct_Unnamed27;
#[repr(C)]
pub struct Struct_Unnamed28 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn
                                          (arg1: *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn
                                           (arg1: *const ::libc::c_void)>,
    pub copyDescription: ::std::option::Option<extern "C" fn
                                                   (arg1:
                                                        *const ::libc::c_void)
                                                   -> CFStringRef>,
    pub equal: ::std::option::Option<extern "C" fn
                                         (arg1: *const ::libc::c_void,
                                          arg2: *const ::libc::c_void)
                                         -> Boolean>,
    pub hash: ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)
                                        -> CFHashCode>,
    pub getPort: ::std::option::Option<extern "C" fn
                                           (arg1: *mut ::libc::c_void)
                                           -> mach_port_t>,
    pub perform: ::std::option::Option<extern "C" fn
                                           (arg1: *mut ::libc::c_void,
                                            arg2: CFIndex,
                                            arg3: CFAllocatorRef,
                                            arg4: *mut ::libc::c_void)
                                           -> *mut ::libc::c_void>,
}
pub type CFRunLoopSourceContext1 = Struct_Unnamed28;
#[repr(C)]
pub struct Struct_Unnamed29 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn
                                          (arg1: *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn
                                           (arg1: *const ::libc::c_void)>,
    pub copyDescription: ::std::option::Option<extern "C" fn
                                                   (arg1:
                                                        *const ::libc::c_void)
                                                   -> CFStringRef>,
}
pub type CFRunLoopObserverContext = Struct_Unnamed29;
pub type CFRunLoopObserverCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: CFRunLoopObserverRef,
                               arg2: CFRunLoopActivity,
                               arg3: *mut ::libc::c_void)>;
#[repr(C)]
pub struct Struct_Unnamed30 {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: ::std::option::Option<extern "C" fn
                                          (arg1: *const ::libc::c_void)
                                          -> *const ::libc::c_void>,
    pub release: ::std::option::Option<extern "C" fn
                                           (arg1: *const ::libc::c_void)>,
    pub copyDescription: ::std::option::Option<extern "C" fn
                                                   (arg1:
                                                        *const ::libc::c_void)
                                                   -> CFStringRef>,
}
pub type CFRunLoopTimerContext = Struct_Unnamed30;
pub type CFRunLoopTimerCallBack =
    ::std::option::Option<extern "C" fn
                              (arg1: CFRunLoopTimerRef,
                               arg2: *mut ::libc::c_void)>;
pub enum Struct___CFUUID { }
pub type CFUUIDRef = *const Struct___CFUUID;
#[repr(C)]
pub struct Struct_Unnamed31 {
    pub byte0: UInt8,
    pub byte1: UInt8,
    pub byte2: UInt8,
    pub byte3: UInt8,
    pub byte4: UInt8,
    pub byte5: UInt8,
    pub byte6: UInt8,
    pub byte7: UInt8,
    pub byte8: UInt8,
    pub byte9: UInt8,
    pub byte10: UInt8,
    pub byte11: UInt8,
    pub byte12: UInt8,
    pub byte13: UInt8,
    pub byte14: UInt8,
    pub byte15: UInt8,
}
pub type CFUUIDBytes = Struct_Unnamed31;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ptrdiff_t = __darwin_ptrdiff_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
pub struct Struct_accessx_descriptor {
    pub ad_name_offset: ::libc::c_uint,
    pub ad_flags: ::libc::c_int,
    pub ad_pad: [::libc::c_int, ..2u],
}
#[repr(C)]
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::libc::c_long,
}
#[repr(C)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
pub type sigset_t = __darwin_sigset_t;
pub type daddr64_t = int64_t;
pub enum Struct_buf { }
pub type buf_t = *mut Struct_buf;
pub enum Struct_file { }
pub type file_t = *mut Struct_file;
pub enum Struct_mount { }
pub type mount_t = *mut Struct_mount;
pub enum Struct_vnode { }
pub type vnode_t = *mut Struct_vnode;
pub enum Struct_proc { }
pub type proc_t = *mut Struct_proc;
pub enum Struct_uio { }
pub type uio_t = *mut Struct_uio;
pub enum Struct_vfs_context { }
pub type vfs_context_t = *mut Struct_vfs_context;
pub enum Struct_vfstable { }
pub type vfstable_t = *mut Struct_vfstable;
pub enum Struct___ifnet { }
pub enum Struct___mbuf { }
pub enum Struct___pkthdr { }
pub enum Struct___socket { }
pub enum Struct___sockopt { }
pub enum Struct___ifaddr { }
pub enum Struct___ifmultiaddr { }
pub enum Struct___ifnet_filter { }
pub enum Struct___rtentry { }
pub enum Struct___if_clone { }
pub enum Struct___bufattr { }
pub type ifnet_t = *mut Struct___ifnet;
pub type mbuf_t = *mut Struct___mbuf;
pub type pkthdr_t = *mut Struct___pkthdr;
pub type socket_t = *mut Struct___socket;
pub type sockopt_t = *mut Struct___sockopt;
pub type ifaddr_t = *mut Struct___ifaddr;
pub type ifmultiaddr_t = *mut Struct___ifmultiaddr;
pub type interface_filter_t = *mut Struct___ifnet_filter;
pub type route_t = *mut Struct___rtentry;
pub type if_clone_t = *mut Struct___if_clone;
pub type bufattr_t = *mut Struct___bufattr;
#[repr(C)]
pub struct Struct_Unnamed32 {
    pub g_guid: [::libc::c_uchar, ..16u],
}
pub type guid_t = Struct_Unnamed32;
pub enum Struct_kauth_ace { }
pub type kauth_ace_t = *mut Struct_kauth_ace;
pub enum Struct_kauth_acl { }
pub type kauth_acl_t = *mut Struct_kauth_acl;
pub enum Struct_kauth_filesec { }
pub type kauth_filesec_t = *mut Struct_kauth_filesec;
#[repr(C)]
pub struct Struct_kevent {
    pub ident: uintptr_t,
    pub filter: int16_t,
    pub flags: uint16_t,
    pub fflags: uint32_t,
    pub data: intptr_t,
    pub udata: *mut ::libc::c_void,
}
#[repr(C)]
pub struct Struct_kevent64_s {
    pub ident: uint64_t,
    pub filter: int16_t,
    pub flags: uint16_t,
    pub fflags: uint32_t,
    pub data: int64_t,
    pub udata: uint64_t,
    pub ext: [uint64_t, ..2u],
}
pub type Enum_Unnamed33 = ::libc::c_uint;
pub const eNoteReapDeprecated: ::libc::c_uint = 268435456;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const eNoteExitReparentedDeprecated: ::libc::c_uint = 524288;
pub enum Struct_selinfo { }
pub type uuid_t = __darwin_uuid_t;
pub enum Struct_fssearchblock { }
pub enum Struct_searchstate { }
#[repr(C)]
pub struct Struct_flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::libc::c_short,
    pub l_whence: ::libc::c_short,
}
#[repr(C)]
pub struct Struct_flocktimeout {
    pub fl: Struct_flock,
    pub timeout: Struct_timespec,
}
#[repr(C)]
pub struct Struct_radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::libc::c_int,
}
#[repr(C)]
pub struct Struct_user32_fcodeblobs {
    pub f_cd_hash: user32_addr_t,
    pub f_hash_size: user32_size_t,
    pub f_cd_buffer: user32_addr_t,
    pub f_cd_size: user32_size_t,
    pub f_out_size: user32_addr_t,
    pub f_arch: ::libc::c_int,
}
pub type user32_fcodeblobs_t = Struct_user32_fcodeblobs;
#[repr(C)]
pub struct Struct_user64_fcodeblobs {
    pub f_cd_hash: user64_addr_t,
    pub f_hash_size: user64_size_t,
    pub f_cd_buffer: user64_addr_t,
    pub f_cd_size: user64_size_t,
    pub f_out_size: user64_addr_t,
    pub f_arch: ::libc::c_int,
    pub __padding: ::libc::c_int,
}
pub type user64_fcodeblobs_t = Struct_user64_fcodeblobs;
#[repr(C)]
pub struct Struct_user_fcodeblobs {
    pub f_cd_hash: user_addr_t,
    pub f_hash_size: user_size_t,
    pub f_cd_buffer: user_addr_t,
    pub f_cd_size: user_size_t,
    pub f_out_size: user_addr_t,
    pub f_arch: ::libc::c_int,
}
pub type user_fcodeblobs_t = Struct_user_fcodeblobs;
#[repr(C)]
pub struct Struct_fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::libc::c_void,
    pub fs_blob_size: size_t,
}
pub type fsignatures_t = Struct_fsignatures;
#[repr(C)]
pub struct Struct_user32_fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: user32_addr_t,
    pub fs_blob_size: user32_size_t,
}
pub type user32_fsignatures_t = Struct_user32_fsignatures;
#[repr(C)]
pub struct Struct_user_fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: user_addr_t,
    pub fs_blob_size: user_size_t,
}
pub type user_fsignatures_t = Struct_user_fsignatures;
#[repr(C)]
pub struct Struct_fstore {
    pub fst_flags: ::libc::c_uint,
    pub fst_posmode: ::libc::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
pub type fstore_t = Struct_fstore;
#[repr(C)]
pub struct Struct_fbootstraptransfer {
    pub fbt_offset: off_t,
    pub fbt_length: size_t,
    pub fbt_buffer: *mut ::libc::c_void,
}
pub type fbootstraptransfer_t = Struct_fbootstraptransfer;
#[repr(C)]
pub struct Struct_user32_fbootstraptransfer {
    pub fbt_offset: off_t,
    pub fbt_length: user32_size_t,
    pub fbt_buffer: user32_addr_t,
}
pub type user32_fbootstraptransfer_t = Struct_user32_fbootstraptransfer;
#[repr(C)]
pub struct Struct_user_fbootstraptransfer {
    pub fbt_offset: off_t,
    pub fbt_length: user_size_t,
    pub fbt_buffer: user_addr_t,
}
pub type user_fbootstraptransfer_t = Struct_user_fbootstraptransfer;
#[repr(C)]
pub struct Struct_log2phys {
    pub l2p_flags: ::libc::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
pub type dispatch_function_t =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)>;
#[repr(C)]
pub struct Struct_time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
pub type time_value_t = Struct_time_value;
pub type alarm_type_t = ::libc::c_int;
pub type sleep_type_t = ::libc::c_int;
pub type clock_id_t = ::libc::c_int;
pub type clock_flavor_t = ::libc::c_int;
pub type clock_attr_t = *mut ::libc::c_int;
pub type clock_res_t = ::libc::c_int;
#[repr(C)]
pub struct Struct_mach_timespec {
    pub tv_sec: ::libc::c_uint,
    pub tv_nsec: clock_res_t,
}
pub type mach_timespec_t = Struct_mach_timespec;
pub type dispatch_time_t = uint64_t;
#[repr(C)]
pub struct Union_Unnamed35 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed35 {
    pub fn _os_obj(&mut self) -> *mut *mut Struct__os_object_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _do(&mut self) -> *mut *mut Struct_dispatch_object_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dc(&mut self) -> *mut *mut Struct_dispatch_continuation_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dq(&mut self) -> *mut *mut Struct_dispatch_queue_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dqa(&mut self) -> *mut *mut Struct_dispatch_queue_attr_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dg(&mut self) -> *mut *mut Struct_dispatch_group_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _ds(&mut self) -> *mut *mut Struct_dispatch_source_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dm(&mut self) -> *mut *mut Struct_dispatch_mach_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dmsg(&mut self) -> *mut *mut Struct_dispatch_mach_msg_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dta(&mut self) -> *mut *mut Struct_dispatch_timer_aggregate_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dsa(&mut self) -> *mut *mut Struct_dispatch_source_attr_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dsema(&mut self) -> *mut *mut Struct_dispatch_semaphore_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _ddata(&mut self) -> *mut *mut Struct_dispatch_data_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _dchannel(&mut self) -> *mut *mut Struct_dispatch_io_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _doperation(&mut self) -> *mut *mut Struct_dispatch_operation_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _ddisk(&mut self) -> *mut *mut Struct_dispatch_disk_s {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub enum Struct__os_object_s { }
pub enum Struct_dispatch_object_s { }
pub enum Struct_dispatch_continuation_s { }
pub enum Struct_dispatch_queue_s { }
pub enum Struct_dispatch_queue_attr_s { }
pub enum Struct_dispatch_group_s { }
pub enum Struct_dispatch_source_s { }
pub enum Struct_dispatch_mach_s { }
pub enum Struct_dispatch_mach_msg_s { }
pub enum Struct_dispatch_timer_aggregate_s { }
pub enum Struct_dispatch_source_attr_s { }
pub enum Struct_dispatch_semaphore_s { }
pub enum Struct_dispatch_data_s { }
pub enum Struct_dispatch_io_s { }
pub enum Struct_dispatch_operation_s { }
pub enum Struct_dispatch_disk_s { }
pub type dispatch_object_t = Union_Unnamed35;
pub type dispatch_block_t = ::libc::c_void;
pub type dispatch_queue_t = *mut Struct_dispatch_queue_s;
pub type dispatch_queue_priority_t = ::libc::c_long;
pub type Enum_Unnamed36 = ::libc::c_uint;
pub const QOS_CLASS_USER_INTERACTIVE: ::libc::c_uint = 33;
pub const QOS_CLASS_USER_INITIATED: ::libc::c_uint = 25;
pub const QOS_CLASS_DEFAULT: ::libc::c_uint = 21;
pub const QOS_CLASS_UTILITY: ::libc::c_uint = 17;
pub const QOS_CLASS_BACKGROUND: ::libc::c_uint = 9;
pub const QOS_CLASS_UNSPECIFIED: ::libc::c_uint = 0;
pub type qos_class_t = ::libc::c_uint;
pub type dispatch_qos_class_t = qos_class_t;
pub type dispatch_queue_attr_t = *mut Struct_dispatch_queue_attr_s;
pub type Enum_Unnamed37 = ::libc::c_uint;
pub const DISPATCH_BLOCK_BARRIER: ::libc::c_uint = 1;
pub const DISPATCH_BLOCK_DETACHED: ::libc::c_uint = 2;
pub const DISPATCH_BLOCK_ASSIGN_CURRENT: ::libc::c_uint = 4;
pub const DISPATCH_BLOCK_NO_QOS_CLASS: ::libc::c_uint = 8;
pub const DISPATCH_BLOCK_INHERIT_QOS_CLASS: ::libc::c_uint = 16;
pub const DISPATCH_BLOCK_ENFORCE_QOS_CLASS: ::libc::c_uint = 32;
pub type dispatch_block_flags_t = ::libc::c_ulong;
pub type kern_return_t = ::libc::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::libc::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_type_name_t = ::libc::c_uint;
pub type mach_msg_copy_options_t = ::libc::c_uint;
pub type mach_msg_descriptor_type_t = ::libc::c_uint;
#[repr(C)]
pub struct Struct_Unnamed38 {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub pad3: ::libc::c_uint,
    pub _type: mach_msg_descriptor_type_t,
}
pub type mach_msg_type_descriptor_t = Struct_Unnamed38;
#[repr(C)]
pub struct Struct_Unnamed39 {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub pad2: ::libc::c_uint,
    pub disposition: mach_msg_type_name_t,
    pub _type: mach_msg_descriptor_type_t,
    pub pad_end: uint32_t,
}
pub type mach_msg_port_descriptor_t = Struct_Unnamed39;
#[repr(C)]
pub struct Struct_Unnamed40 {
    pub address: uint32_t,
    pub size: mach_msg_size_t,
    pub deallocate: boolean_t,
    pub copy: mach_msg_copy_options_t,
    pub pad1: ::libc::c_uint,
    pub _type: mach_msg_descriptor_type_t,
}
pub type mach_msg_ool_descriptor32_t = Struct_Unnamed40;
#[repr(C)]
pub struct Struct_Unnamed41 {
    pub address: uint64_t,
    pub deallocate: boolean_t,
    pub copy: mach_msg_copy_options_t,
    pub pad1: ::libc::c_uint,
    pub _type: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
pub type mach_msg_ool_descriptor64_t = Struct_Unnamed41;
#[repr(C)]
pub struct Struct_Unnamed42 {
    pub address: *mut ::libc::c_void,
    pub deallocate: boolean_t,
    pub copy: mach_msg_copy_options_t,
    pub pad1: ::libc::c_uint,
    pub _type: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
pub type mach_msg_ool_descriptor_t = Struct_Unnamed42;
#[repr(C)]
pub struct Struct_Unnamed43 {
    pub address: uint32_t,
    pub count: mach_msg_size_t,
    pub deallocate: boolean_t,
    pub copy: mach_msg_copy_options_t,
    pub disposition: mach_msg_type_name_t,
    pub _type: mach_msg_descriptor_type_t,
}
pub type mach_msg_ool_ports_descriptor32_t = Struct_Unnamed43;
#[repr(C)]
pub struct Struct_Unnamed44 {
    pub address: uint64_t,
    pub deallocate: boolean_t,
    pub copy: mach_msg_copy_options_t,
    pub disposition: mach_msg_type_name_t,
    pub _type: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
pub type mach_msg_ool_ports_descriptor64_t = Struct_Unnamed44;
#[repr(C)]
pub struct Struct_Unnamed45 {
    pub address: *mut ::libc::c_void,
    pub deallocate: boolean_t,
    pub copy: mach_msg_copy_options_t,
    pub disposition: mach_msg_type_name_t,
    pub _type: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
pub type mach_msg_ool_ports_descriptor_t = Struct_Unnamed45;
#[repr(C)]
pub struct Union_Unnamed46 {
    pub data: [u32, ..5u],
}
impl Union_Unnamed46 {
    pub fn port(&mut self) -> *mut mach_msg_port_descriptor_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn out_of_line(&mut self) -> *mut mach_msg_ool_descriptor_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn ool_ports(&mut self) -> *mut mach_msg_ool_ports_descriptor_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _type(&mut self) -> *mut mach_msg_type_descriptor_t {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type mach_msg_descriptor_t = Union_Unnamed46;
#[repr(C)]
pub struct Struct_Unnamed47 {
    pub msgh_descriptor_count: mach_msg_size_t,
}
pub type mach_msg_body_t = Struct_Unnamed47;
#[repr(C)]
pub struct Struct_Unnamed48 {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
pub type mach_msg_header_t = Struct_Unnamed48;
#[repr(C)]
pub struct Struct_Unnamed49 {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
pub type mach_msg_base_t = Struct_Unnamed49;
pub type mach_msg_trailer_type_t = ::libc::c_uint;
pub type mach_msg_trailer_size_t = ::libc::c_uint;
pub type mach_msg_trailer_info_t = *mut ::libc::c_char;
#[repr(C)]
pub struct Struct_Unnamed50 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
pub type mach_msg_trailer_t = Struct_Unnamed50;
#[repr(C)]
pub struct Struct_Unnamed51 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
pub type mach_msg_seqno_trailer_t = Struct_Unnamed51;
#[repr(C)]
pub struct Struct_Unnamed52 {
    pub val: [::libc::c_uint, ..2u],
}
pub type security_token_t = Struct_Unnamed52;
#[repr(C)]
pub struct Struct_Unnamed53 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
pub type mach_msg_security_trailer_t = Struct_Unnamed53;
#[repr(C)]
pub struct Struct_Unnamed54 {
    pub val: [::libc::c_uint, ..8u],
}
pub type audit_token_t = Struct_Unnamed54;
#[repr(C)]
pub struct Struct_Unnamed55 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
pub type mach_msg_audit_trailer_t = Struct_Unnamed55;
#[repr(C)]
pub struct Struct_Unnamed56 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
pub type mach_msg_context_trailer_t = Struct_Unnamed56;
#[repr(C)]
pub struct Struct_Unnamed57 {
    pub sender: mach_port_name_t,
}
pub type msg_labels_t = Struct_Unnamed57;
#[repr(C)]
pub struct Struct_Unnamed58 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: ::libc::c_int,
    pub msgh_labels: msg_labels_t,
}
pub type mach_msg_mac_trailer_t = Struct_Unnamed58;
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub type mach_msg_options_t = integer_t;
#[repr(C)]
pub struct Struct_Unnamed59 {
    pub header: mach_msg_header_t,
}
pub type mach_msg_empty_send_t = Struct_Unnamed59;
#[repr(C)]
pub struct Struct_Unnamed60 {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
pub type mach_msg_empty_rcv_t = Struct_Unnamed60;
#[repr(C)]
pub struct Union_Unnamed61 {
    pub data: [u32, ..10u],
}
impl Union_Unnamed61 {
    pub fn send(&mut self) -> *mut mach_msg_empty_send_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn rcv(&mut self) -> *mut mach_msg_empty_rcv_t {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type mach_msg_empty_t = Union_Unnamed61;
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
pub type sig_atomic_t = ::libc::c_int;
#[repr(C)]
pub struct Struct_i386_thread_state {
    pub eax: ::libc::c_uint,
    pub ebx: ::libc::c_uint,
    pub ecx: ::libc::c_uint,
    pub edx: ::libc::c_uint,
    pub edi: ::libc::c_uint,
    pub esi: ::libc::c_uint,
    pub ebp: ::libc::c_uint,
    pub esp: ::libc::c_uint,
    pub ss: ::libc::c_uint,
    pub eflags: ::libc::c_uint,
    pub eip: ::libc::c_uint,
    pub cs: ::libc::c_uint,
    pub ds: ::libc::c_uint,
    pub es: ::libc::c_uint,
    pub fs: ::libc::c_uint,
    pub gs: ::libc::c_uint,
}
#[repr(C)]
pub struct Struct_fp_control {
    pub invalid: ::libc::c_ushort,
    pub denorm: ::libc::c_ushort,
    pub zdiv: ::libc::c_ushort,
    pub ovrfl: ::libc::c_ushort,
    pub undfl: ::libc::c_ushort,
    pub precis: ::libc::c_ushort,
    pub unnamed_field1: ::libc::c_ushort,
    pub pc: ::libc::c_ushort,
    pub rc: ::libc::c_ushort,
    pub unnamed_field2: ::libc::c_ushort,
    pub unnamed_field3: ::libc::c_ushort,
}
pub type fp_control_t = Struct_fp_control;
#[repr(C)]
pub struct Struct_fp_status {
    pub invalid: ::libc::c_ushort,
    pub denorm: ::libc::c_ushort,
    pub zdiv: ::libc::c_ushort,
    pub ovrfl: ::libc::c_ushort,
    pub undfl: ::libc::c_ushort,
    pub precis: ::libc::c_ushort,
    pub stkflt: ::libc::c_ushort,
    pub errsumm: ::libc::c_ushort,
    pub c0: ::libc::c_ushort,
    pub c1: ::libc::c_ushort,
    pub c2: ::libc::c_ushort,
    pub tos: ::libc::c_ushort,
    pub c3: ::libc::c_ushort,
    pub busy: ::libc::c_ushort,
}
pub type fp_status_t = Struct_fp_status;
#[repr(C)]
pub struct Struct_mmst_reg {
    pub mmst_reg: [::libc::c_char, ..10u],
    pub mmst_rsrv: [::libc::c_char, ..6u],
}
#[repr(C)]
pub struct Struct_xmm_reg {
    pub xmm_reg: [::libc::c_char, ..16u],
}
#[repr(C)]
pub struct Struct_i386_float_state {
    pub fpu_reserved: [::libc::c_int, ..2u],
    pub fpu_fcw: Struct_fp_control,
    pub fpu_fsw: Struct_fp_status,
    pub fpu_ftw: __uint8_t,
    pub fpu_rsrv1: __uint8_t,
    pub fpu_fop: __uint16_t,
    pub fpu_ip: __uint32_t,
    pub fpu_cs: __uint16_t,
    pub fpu_rsrv2: __uint16_t,
    pub fpu_dp: __uint32_t,
    pub fpu_ds: __uint16_t,
    pub fpu_rsrv3: __uint16_t,
    pub fpu_mxcsr: __uint32_t,
    pub fpu_mxcsrmask: __uint32_t,
    pub fpu_stmm0: Struct_mmst_reg,
    pub fpu_stmm1: Struct_mmst_reg,
    pub fpu_stmm2: Struct_mmst_reg,
    pub fpu_stmm3: Struct_mmst_reg,
    pub fpu_stmm4: Struct_mmst_reg,
    pub fpu_stmm5: Struct_mmst_reg,
    pub fpu_stmm6: Struct_mmst_reg,
    pub fpu_stmm7: Struct_mmst_reg,
    pub fpu_xmm0: Struct_xmm_reg,
    pub fpu_xmm1: Struct_xmm_reg,
    pub fpu_xmm2: Struct_xmm_reg,
    pub fpu_xmm3: Struct_xmm_reg,
    pub fpu_xmm4: Struct_xmm_reg,
    pub fpu_xmm5: Struct_xmm_reg,
    pub fpu_xmm6: Struct_xmm_reg,
    pub fpu_xmm7: Struct_xmm_reg,
    pub fpu_rsrv4: [::libc::c_char, ..224u],
    pub fpu_reserved1: ::libc::c_int,
}
#[repr(C)]
pub struct Struct_i386_avx_state {
    pub fpu_reserved: [::libc::c_int, ..2u],
    pub fpu_fcw: Struct_fp_control,
    pub fpu_fsw: Struct_fp_status,
    pub fpu_ftw: __uint8_t,
    pub fpu_rsrv1: __uint8_t,
    pub fpu_fop: __uint16_t,
    pub fpu_ip: __uint32_t,
    pub fpu_cs: __uint16_t,
    pub fpu_rsrv2: __uint16_t,
    pub fpu_dp: __uint32_t,
    pub fpu_ds: __uint16_t,
    pub fpu_rsrv3: __uint16_t,
    pub fpu_mxcsr: __uint32_t,
    pub fpu_mxcsrmask: __uint32_t,
    pub fpu_stmm0: Struct_mmst_reg,
    pub fpu_stmm1: Struct_mmst_reg,
    pub fpu_stmm2: Struct_mmst_reg,
    pub fpu_stmm3: Struct_mmst_reg,
    pub fpu_stmm4: Struct_mmst_reg,
    pub fpu_stmm5: Struct_mmst_reg,
    pub fpu_stmm6: Struct_mmst_reg,
    pub fpu_stmm7: Struct_mmst_reg,
    pub fpu_xmm0: Struct_xmm_reg,
    pub fpu_xmm1: Struct_xmm_reg,
    pub fpu_xmm2: Struct_xmm_reg,
    pub fpu_xmm3: Struct_xmm_reg,
    pub fpu_xmm4: Struct_xmm_reg,
    pub fpu_xmm5: Struct_xmm_reg,
    pub fpu_xmm6: Struct_xmm_reg,
    pub fpu_xmm7: Struct_xmm_reg,
    pub fpu_rsrv4: [::libc::c_char, ..224u],
    pub fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char, ..64u],
    pub __fpu_ymmh0: Struct_xmm_reg,
    pub __fpu_ymmh1: Struct_xmm_reg,
    pub __fpu_ymmh2: Struct_xmm_reg,
    pub __fpu_ymmh3: Struct_xmm_reg,
    pub __fpu_ymmh4: Struct_xmm_reg,
    pub __fpu_ymmh5: Struct_xmm_reg,
    pub __fpu_ymmh6: Struct_xmm_reg,
    pub __fpu_ymmh7: Struct_xmm_reg,
}
#[repr(C)]
pub struct Struct_i386_exception_state {
    pub trapno: __uint16_t,
    pub cpu: __uint16_t,
    pub err: __uint32_t,
    pub faultvaddr: __uint32_t,
}
#[repr(C)]
pub struct Struct_x86_debug_state32 {
    pub dr0: ::libc::c_uint,
    pub dr1: ::libc::c_uint,
    pub dr2: ::libc::c_uint,
    pub dr3: ::libc::c_uint,
    pub dr4: ::libc::c_uint,
    pub dr5: ::libc::c_uint,
    pub dr6: ::libc::c_uint,
    pub dr7: ::libc::c_uint,
}
#[repr(C)]
pub struct Struct_x86_thread_state64 {
    pub rax: __uint64_t,
    pub rbx: __uint64_t,
    pub rcx: __uint64_t,
    pub rdx: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rsp: __uint64_t,
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rip: __uint64_t,
    pub rflags: __uint64_t,
    pub cs: __uint64_t,
    pub fs: __uint64_t,
    pub gs: __uint64_t,
}
#[repr(C)]
pub struct Struct_x86_float_state64 {
    pub fpu_reserved: [::libc::c_int, ..2u],
    pub fpu_fcw: Struct_fp_control,
    pub fpu_fsw: Struct_fp_status,
    pub fpu_ftw: __uint8_t,
    pub fpu_rsrv1: __uint8_t,
    pub fpu_fop: __uint16_t,
    pub fpu_ip: __uint32_t,
    pub fpu_cs: __uint16_t,
    pub fpu_rsrv2: __uint16_t,
    pub fpu_dp: __uint32_t,
    pub fpu_ds: __uint16_t,
    pub fpu_rsrv3: __uint16_t,
    pub fpu_mxcsr: __uint32_t,
    pub fpu_mxcsrmask: __uint32_t,
    pub fpu_stmm0: Struct_mmst_reg,
    pub fpu_stmm1: Struct_mmst_reg,
    pub fpu_stmm2: Struct_mmst_reg,
    pub fpu_stmm3: Struct_mmst_reg,
    pub fpu_stmm4: Struct_mmst_reg,
    pub fpu_stmm5: Struct_mmst_reg,
    pub fpu_stmm6: Struct_mmst_reg,
    pub fpu_stmm7: Struct_mmst_reg,
    pub fpu_xmm0: Struct_xmm_reg,
    pub fpu_xmm1: Struct_xmm_reg,
    pub fpu_xmm2: Struct_xmm_reg,
    pub fpu_xmm3: Struct_xmm_reg,
    pub fpu_xmm4: Struct_xmm_reg,
    pub fpu_xmm5: Struct_xmm_reg,
    pub fpu_xmm6: Struct_xmm_reg,
    pub fpu_xmm7: Struct_xmm_reg,
    pub fpu_xmm8: Struct_xmm_reg,
    pub fpu_xmm9: Struct_xmm_reg,
    pub fpu_xmm10: Struct_xmm_reg,
    pub fpu_xmm11: Struct_xmm_reg,
    pub fpu_xmm12: Struct_xmm_reg,
    pub fpu_xmm13: Struct_xmm_reg,
    pub fpu_xmm14: Struct_xmm_reg,
    pub fpu_xmm15: Struct_xmm_reg,
    pub fpu_rsrv4: [::libc::c_char, ..96u],
    pub fpu_reserved1: ::libc::c_int,
}
#[repr(C)]
pub struct Struct_x86_avx_state64 {
    pub fpu_reserved: [::libc::c_int, ..2u],
    pub fpu_fcw: Struct_fp_control,
    pub fpu_fsw: Struct_fp_status,
    pub fpu_ftw: __uint8_t,
    pub fpu_rsrv1: __uint8_t,
    pub fpu_fop: __uint16_t,
    pub fpu_ip: __uint32_t,
    pub fpu_cs: __uint16_t,
    pub fpu_rsrv2: __uint16_t,
    pub fpu_dp: __uint32_t,
    pub fpu_ds: __uint16_t,
    pub fpu_rsrv3: __uint16_t,
    pub fpu_mxcsr: __uint32_t,
    pub fpu_mxcsrmask: __uint32_t,
    pub fpu_stmm0: Struct_mmst_reg,
    pub fpu_stmm1: Struct_mmst_reg,
    pub fpu_stmm2: Struct_mmst_reg,
    pub fpu_stmm3: Struct_mmst_reg,
    pub fpu_stmm4: Struct_mmst_reg,
    pub fpu_stmm5: Struct_mmst_reg,
    pub fpu_stmm6: Struct_mmst_reg,
    pub fpu_stmm7: Struct_mmst_reg,
    pub fpu_xmm0: Struct_xmm_reg,
    pub fpu_xmm1: Struct_xmm_reg,
    pub fpu_xmm2: Struct_xmm_reg,
    pub fpu_xmm3: Struct_xmm_reg,
    pub fpu_xmm4: Struct_xmm_reg,
    pub fpu_xmm5: Struct_xmm_reg,
    pub fpu_xmm6: Struct_xmm_reg,
    pub fpu_xmm7: Struct_xmm_reg,
    pub fpu_xmm8: Struct_xmm_reg,
    pub fpu_xmm9: Struct_xmm_reg,
    pub fpu_xmm10: Struct_xmm_reg,
    pub fpu_xmm11: Struct_xmm_reg,
    pub fpu_xmm12: Struct_xmm_reg,
    pub fpu_xmm13: Struct_xmm_reg,
    pub fpu_xmm14: Struct_xmm_reg,
    pub fpu_xmm15: Struct_xmm_reg,
    pub fpu_rsrv4: [::libc::c_char, ..96u],
    pub fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char, ..64u],
    pub __fpu_ymmh0: Struct_xmm_reg,
    pub __fpu_ymmh1: Struct_xmm_reg,
    pub __fpu_ymmh2: Struct_xmm_reg,
    pub __fpu_ymmh3: Struct_xmm_reg,
    pub __fpu_ymmh4: Struct_xmm_reg,
    pub __fpu_ymmh5: Struct_xmm_reg,
    pub __fpu_ymmh6: Struct_xmm_reg,
    pub __fpu_ymmh7: Struct_xmm_reg,
    pub __fpu_ymmh8: Struct_xmm_reg,
    pub __fpu_ymmh9: Struct_xmm_reg,
    pub __fpu_ymmh10: Struct_xmm_reg,
    pub __fpu_ymmh11: Struct_xmm_reg,
    pub __fpu_ymmh12: Struct_xmm_reg,
    pub __fpu_ymmh13: Struct_xmm_reg,
    pub __fpu_ymmh14: Struct_xmm_reg,
    pub __fpu_ymmh15: Struct_xmm_reg,
}
#[repr(C)]
pub struct Struct_x86_exception_state64 {
    pub trapno: __uint16_t,
    pub cpu: __uint16_t,
    pub err: __uint32_t,
    pub faultvaddr: __uint64_t,
}
#[repr(C)]
pub struct Struct_x86_debug_state64 {
    pub dr0: __uint64_t,
    pub dr1: __uint64_t,
    pub dr2: __uint64_t,
    pub dr3: __uint64_t,
    pub dr4: __uint64_t,
    pub dr5: __uint64_t,
    pub dr6: __uint64_t,
    pub dr7: __uint64_t,
}
#[repr(C)]
pub struct Struct_mcontext32 {
    pub es: Struct_i386_exception_state,
    pub ss: Struct_i386_thread_state,
    pub fs: Struct_i386_float_state,
}
#[repr(C)]
pub struct Struct_mcontext_avx32 {
    pub es: Struct_i386_exception_state,
    pub ss: Struct_i386_thread_state,
    pub fs: Struct_i386_avx_state,
}
#[repr(C)]
pub struct Struct_mcontext64 {
    pub es: Struct_x86_exception_state64,
    pub ss: Struct_x86_thread_state64,
    pub fs: Struct_x86_float_state64,
}
#[repr(C)]
pub struct Struct_mcontext_avx64 {
    pub es: Struct_x86_exception_state64,
    pub ss: Struct_x86_thread_state64,
    pub fs: Struct_x86_avx_state64,
}
pub type mcontext_t = *mut Struct_mcontext64;
#[repr(C)]
pub struct Struct_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::libc::c_int,
}
pub type stack_t = Struct_sigaltstack;
#[repr(C)]
pub struct Struct_ucontext {
    pub uc_onstack: ::libc::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct_sigaltstack,
    pub uc_link: *mut Struct_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct_mcontext64,
}
pub type ucontext_t = Struct_ucontext;
#[repr(C)]
pub struct Union_sigval {
    pub data: [u64, ..1u],
}
impl Union_sigval {
    pub fn sival_int(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct___siginfo {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::libc::c_int,
    pub si_addr: *mut ::libc::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::libc::c_long,
    pub __pad: [::libc::c_ulong, ..7u],
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
pub struct Union___sigaction_u {
    pub data: [u64, ..1u],
}
impl Union___sigaction_u {
    pub fn __sa_handler(&mut self)
     -> *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)> {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn
                                        (arg1: ::libc::c_int,
                                         arg2: *mut Struct___siginfo,
                                         arg3: *mut ::libc::c_void)> {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<extern "C" fn
                                            (arg1: *mut ::libc::c_void,
                                             arg2: ::libc::c_int,
                                             arg3: ::libc::c_int,
                                             arg4: *mut siginfo_t,
                                             arg5: *mut ::libc::c_void)>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
#[repr(C)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
pub type sig_t = ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)>;
#[repr(C)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)>,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
#[repr(C)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_char,
    pub ss_onstack: ::libc::c_int,
}
pub type dispatch_source_t = *mut Struct_dispatch_source_s;
pub enum Struct_dispatch_source_type_s { }
pub type dispatch_source_type_t = *const Struct_dispatch_source_type_s;
pub type dispatch_source_mach_send_flags_t = ::libc::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::libc::c_ulong;
pub type dispatch_source_proc_flags_t = ::libc::c_ulong;
pub type dispatch_source_vnode_flags_t = ::libc::c_ulong;
pub type dispatch_source_timer_flags_t = ::libc::c_ulong;
pub type dispatch_group_t = *mut Struct_dispatch_group_s;
pub type dispatch_semaphore_t = *mut Struct_dispatch_semaphore_s;
pub type dispatch_once_t = ::libc::c_long;
pub type dispatch_data_t = *mut Struct_dispatch_data_s;
pub type dispatch_data_applier_t = ::libc::c_void;
pub type dispatch_fd_t = ::libc::c_int;
pub type dispatch_io_t = *mut Struct_dispatch_io_s;
pub type dispatch_io_type_t = ::libc::c_ulong;
pub type dispatch_io_handler_t = ::libc::c_void;
pub type dispatch_io_close_flags_t = ::libc::c_ulong;
pub type dispatch_io_interval_flags_t = ::libc::c_ulong;
pub type FSEventStreamCreateFlags = UInt32;
pub type Enum_Unnamed62 = ::libc::c_uint;
pub const kFSEventStreamCreateFlagNone: ::libc::c_uint = 0;
pub const kFSEventStreamCreateFlagUseCFTypes: ::libc::c_uint = 1;
pub const kFSEventStreamCreateFlagNoDefer: ::libc::c_uint = 2;
pub const kFSEventStreamCreateFlagWatchRoot: ::libc::c_uint = 4;
pub const kFSEventStreamCreateFlagIgnoreSelf: ::libc::c_uint = 8;
pub const kFSEventStreamCreateFlagFileEvents: ::libc::c_uint = 16;
pub const kFSEventStreamCreateFlagMarkSelf: ::libc::c_uint = 32;
pub type FSEventStreamEventFlags = UInt32;
pub type Enum_Unnamed63 = ::libc::c_uint;
pub const kFSEventStreamEventFlagNone: ::libc::c_uint = 0;
pub const kFSEventStreamEventFlagMustScanSubDirs: ::libc::c_uint = 1;
pub const kFSEventStreamEventFlagUserDropped: ::libc::c_uint = 2;
pub const kFSEventStreamEventFlagKernelDropped: ::libc::c_uint = 4;
pub const kFSEventStreamEventFlagEventIdsWrapped: ::libc::c_uint = 8;
pub const kFSEventStreamEventFlagHistoryDone: ::libc::c_uint = 16;
pub const kFSEventStreamEventFlagRootChanged: ::libc::c_uint = 32;
pub const kFSEventStreamEventFlagMount: ::libc::c_uint = 64;
pub const kFSEventStreamEventFlagUnmount: ::libc::c_uint = 128;
pub const kFSEventStreamEventFlagItemCreated: ::libc::c_uint = 256;
pub const kFSEventStreamEventFlagItemRemoved: ::libc::c_uint = 512;
pub const kFSEventStreamEventFlagItemInodeMetaMod: ::libc::c_uint = 1024;
pub const kFSEventStreamEventFlagItemRenamed: ::libc::c_uint = 2048;
pub const kFSEventStreamEventFlagItemModified: ::libc::c_uint = 4096;
pub const kFSEventStreamEventFlagItemFinderInfoMod: ::libc::c_uint = 8192;
pub const kFSEventStreamEventFlagItemChangeOwner: ::libc::c_uint = 16384;
pub const kFSEventStreamEventFlagItemXattrMod: ::libc::c_uint = 32768;
pub const kFSEventStreamEventFlagItemIsFile: ::libc::c_uint = 65536;
pub const kFSEventStreamEventFlagItemIsDir: ::libc::c_uint = 131072;
pub const kFSEventStreamEventFlagItemIsSymlink: ::libc::c_uint = 262144;
pub const kFSEventStreamEventFlagOwnEvent: ::libc::c_uint = 524288;
pub type FSEventStreamEventId = UInt64;
pub type Enum_Unnamed64 = ::libc::c_ulong;
pub const kFSEventStreamEventIdSinceNow: ::libc::c_ulong = -1;
pub enum Struct___FSEventStream { }
pub type FSEventStreamRef = *mut Struct___FSEventStream;
pub type ConstFSEventStreamRef = *const Struct___FSEventStream;
#[repr(C)]
pub struct Struct_FSEventStreamContext {
    pub version: CFIndex,
    pub info: *mut ::libc::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
}
pub type FSEventStreamContext = Struct_FSEventStreamContext;
pub type FSEventStreamCallback =
    ::std::option::Option<extern "C" fn
                              (arg1: ConstFSEventStreamRef,
                               arg2: *mut ::libc::c_void, arg3: size_t,
                               arg4: *mut ::libc::c_void,
                               arg5: *const FSEventStreamEventFlags,
                               arg6: *const FSEventStreamEventId)>;
#[link(name = "CoreServices", kind = "framework")]
extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::libc::c_void, ..32u];
    pub static mut _NSConcreteStackBlock: [*mut ::libc::c_void, ..32u];
    pub static mut kCFCoreFoundationVersionNumber: ::libc::c_double;
    pub static kCFNull: CFNullRef;
    pub static kCFAllocatorDefault: CFAllocatorRef;
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
    pub static kCFAllocatorMalloc: CFAllocatorRef;
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
    pub static kCFAllocatorNull: CFAllocatorRef;
    pub static kCFAllocatorUseContext: CFAllocatorRef;
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFStringRef;
    pub static kCFLocaleIdentifier: CFStringRef;
    pub static kCFLocaleLanguageCode: CFStringRef;
    pub static kCFLocaleCountryCode: CFStringRef;
    pub static kCFLocaleScriptCode: CFStringRef;
    pub static kCFLocaleVariantCode: CFStringRef;
    pub static kCFLocaleExemplarCharacterSet: CFStringRef;
    pub static kCFLocaleCalendarIdentifier: CFStringRef;
    pub static kCFLocaleCalendar: CFStringRef;
    pub static kCFLocaleCollationIdentifier: CFStringRef;
    pub static kCFLocaleUsesMetricSystem: CFStringRef;
    pub static kCFLocaleMeasurementSystem: CFStringRef;
    pub static kCFLocaleDecimalSeparator: CFStringRef;
    pub static kCFLocaleGroupingSeparator: CFStringRef;
    pub static kCFLocaleCurrencySymbol: CFStringRef;
    pub static kCFLocaleCurrencyCode: CFStringRef;
    pub static kCFLocaleCollatorIdentifier: CFStringRef;
    pub static kCFLocaleQuotationBeginDelimiterKey: CFStringRef;
    pub static kCFLocaleQuotationEndDelimiterKey: CFStringRef;
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFStringRef;
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFStringRef;
    pub static kCFGregorianCalendar: CFStringRef;
    pub static kCFBuddhistCalendar: CFStringRef;
    pub static kCFChineseCalendar: CFStringRef;
    pub static kCFHebrewCalendar: CFStringRef;
    pub static kCFIslamicCalendar: CFStringRef;
    pub static kCFIslamicCivilCalendar: CFStringRef;
    pub static kCFJapaneseCalendar: CFStringRef;
    pub static kCFRepublicOfChinaCalendar: CFStringRef;
    pub static kCFPersianCalendar: CFStringRef;
    pub static kCFIndianCalendar: CFStringRef;
    pub static kCFISO8601Calendar: CFStringRef;
    pub static kCFIslamicTabularCalendar: CFStringRef;
    pub static kCFIslamicUmmAlQuraCalendar: CFStringRef;
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
    pub static kCFStringTransformToLatin: CFStringRef;
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
    pub static kCFStringTransformLatinKatakana: CFStringRef;
    pub static kCFStringTransformLatinHiragana: CFStringRef;
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
    pub static kCFStringTransformMandarinLatin: CFStringRef;
    pub static kCFStringTransformLatinHangul: CFStringRef;
    pub static kCFStringTransformLatinArabic: CFStringRef;
    pub static kCFStringTransformLatinHebrew: CFStringRef;
    pub static kCFStringTransformLatinThai: CFStringRef;
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
    pub static kCFStringTransformLatinGreek: CFStringRef;
    pub static kCFStringTransformToXMLHex: CFStringRef;
    pub static kCFStringTransformToUnicodeName: CFStringRef;
    pub static kCFStringTransformStripDiacritics: CFStringRef;
    pub static kCFRunLoopDefaultMode: CFStringRef;
    pub static kCFRunLoopCommonModes: CFStringRef;
    pub static mut optarg: *mut ::libc::c_char;
    pub static mut optind: ::libc::c_int;
    pub static mut opterr: ::libc::c_int;
    pub static mut optopt: ::libc::c_int;
    pub static mut selwait: ::libc::c_int;
    pub static mut suboptarg: *mut ::libc::c_char;
    pub static mut optreset: ::libc::c_int;
    pub static mut _dispatch_main_q: Struct_dispatch_queue_s;
    pub static mut _dispatch_queue_attr_concurrent:
               Struct_dispatch_queue_attr_s;
    pub static mut KERNEL_SECURITY_TOKEN: security_token_t;
    pub static mut KERNEL_AUDIT_TOKEN: audit_token_t;
    pub static _dispatch_source_type_data_add: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_data_or: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_mach_send: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_mach_recv: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_memorypressure:
               Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_proc: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_read: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_signal: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_timer: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_vnode: Struct_dispatch_source_type_s;
    pub static _dispatch_source_type_write: Struct_dispatch_source_type_s;
    pub static mut _dispatch_data_empty: Struct_dispatch_data_s;
    pub static _dispatch_data_destructor_free: dispatch_block_t;
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}
#[link(name = "CoreServices", kind = "framework")]
extern "C" {
    pub fn _Block_copy(aBlock: *const ::libc::c_void) -> *mut ::libc::c_void;
    pub fn _Block_release(aBlock: *const ::libc::c_void);
    pub fn _Block_object_assign(arg1: *mut ::libc::c_void,
                                arg2: *const ::libc::c_void,
                                arg3: ::libc::c_int);
    pub fn _Block_object_dispose(arg1: *const ::libc::c_void,
                                 arg2: ::libc::c_int);
    pub fn Debugger();
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
    pub fn SysBreak();
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
    pub fn CFNullGetTypeID() -> CFTypeID;
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
    pub fn CFAllocatorCreate(allocator: CFAllocatorRef,
                             context: *mut CFAllocatorContext)
     -> CFAllocatorRef;
    pub fn CFAllocatorAllocate(allocator: CFAllocatorRef, size: CFIndex,
                               hint: CFOptionFlags) -> *mut ::libc::c_void;
    pub fn CFAllocatorReallocate(allocator: CFAllocatorRef,
                                 ptr: *mut ::libc::c_void, newsize: CFIndex,
                                 hint: CFOptionFlags) -> *mut ::libc::c_void;
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef,
                                 ptr: *mut ::libc::c_void);
    pub fn CFAllocatorGetPreferredSizeForSize(allocator: CFAllocatorRef,
                                              size: CFIndex,
                                              hint: CFOptionFlags) -> CFIndex;
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef,
                                 context: *mut CFAllocatorContext);
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
    pub fn CFRelease(cf: CFTypeRef);
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
    pub fn CFArrayGetTypeID() -> CFTypeID;
    pub fn CFArrayCreate(allocator: CFAllocatorRef,
                         values: *mut *const ::libc::c_void,
                         numValues: CFIndex,
                         callBacks: *const CFArrayCallBacks) -> CFArrayRef;
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef)
     -> CFArrayRef;
    pub fn CFArrayCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex,
                                callBacks: *const CFArrayCallBacks)
     -> CFMutableArrayRef;
    pub fn CFArrayCreateMutableCopy(allocator: CFAllocatorRef,
                                    capacity: CFIndex, theArray: CFArrayRef)
     -> CFMutableArrayRef;
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
    pub fn CFArrayGetCountOfValue(theArray: CFArrayRef, range: CFRange,
                                  value: *const ::libc::c_void) -> CFIndex;
    pub fn CFArrayContainsValue(theArray: CFArrayRef, range: CFRange,
                                value: *const ::libc::c_void) -> Boolean;
    pub fn CFArrayGetValueAtIndex(theArray: CFArrayRef, idx: CFIndex)
     -> *const ::libc::c_void;
    pub fn CFArrayGetValues(theArray: CFArrayRef, range: CFRange,
                            values: *mut *const ::libc::c_void);
    pub fn CFArrayApplyFunction(theArray: CFArrayRef, range: CFRange,
                                applier: CFArrayApplierFunction,
                                context: *mut ::libc::c_void);
    pub fn CFArrayGetFirstIndexOfValue(theArray: CFArrayRef, range: CFRange,
                                       value: *const ::libc::c_void)
     -> CFIndex;
    pub fn CFArrayGetLastIndexOfValue(theArray: CFArrayRef, range: CFRange,
                                      value: *const ::libc::c_void)
     -> CFIndex;
    pub fn CFArrayBSearchValues(theArray: CFArrayRef, range: CFRange,
                                value: *const ::libc::c_void,
                                comparator: CFComparatorFunction,
                                context: *mut ::libc::c_void) -> CFIndex;
    pub fn CFArrayAppendValue(theArray: CFMutableArrayRef,
                              value: *const ::libc::c_void);
    pub fn CFArrayInsertValueAtIndex(theArray: CFMutableArrayRef,
                                     idx: CFIndex,
                                     value: *const ::libc::c_void);
    pub fn CFArraySetValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex,
                                  value: *const ::libc::c_void);
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef,
                                     idx: CFIndex);
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef);
    pub fn CFArrayReplaceValues(theArray: CFMutableArrayRef, range: CFRange,
                                newValues: *mut *const ::libc::c_void,
                                newCount: CFIndex);
    pub fn CFArrayExchangeValuesAtIndices(theArray: CFMutableArrayRef,
                                          idx1: CFIndex, idx2: CFIndex);
    pub fn CFArraySortValues(theArray: CFMutableArrayRef, range: CFRange,
                             comparator: CFComparatorFunction,
                             context: *mut ::libc::c_void);
    pub fn CFArrayAppendArray(theArray: CFMutableArrayRef,
                              otherArray: CFArrayRef, otherRange: CFRange);
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
    pub fn CFDateGetTypeID() -> CFTypeID;
    pub fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime)
     -> CFDateRef;
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
    pub fn CFDateGetTimeIntervalSinceDate(theDate: CFDateRef,
                                          otherDate: CFDateRef)
     -> CFTimeInterval;
    pub fn CFDateCompare(theDate: CFDateRef, otherDate: CFDateRef,
                         context: *mut ::libc::c_void) -> CFComparisonResult;
    pub fn CFGregorianDateIsValid(gdate: CFGregorianDate,
                                  unitFlags: CFOptionFlags) -> Boolean;
    pub fn CFGregorianDateGetAbsoluteTime(gdate: CFGregorianDate,
                                          tz: CFTimeZoneRef)
     -> CFAbsoluteTime;
    pub fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime,
                                          tz: CFTimeZoneRef)
     -> CFGregorianDate;
    pub fn CFAbsoluteTimeAddGregorianUnits(at: CFAbsoluteTime,
                                           tz: CFTimeZoneRef,
                                           units: CFGregorianUnits)
     -> CFAbsoluteTime;
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(at1: CFAbsoluteTime,
                                                       at2: CFAbsoluteTime,
                                                       tz: CFTimeZoneRef,
                                                       unitFlags:
                                                           CFOptionFlags)
     -> CFGregorianUnits;
    pub fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef)
     -> SInt32;
    pub fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef)
     -> SInt32;
    pub fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef)
     -> SInt32;
    pub fn CFDataGetTypeID() -> CFTypeID;
    pub fn CFDataCreate(allocator: CFAllocatorRef, bytes: *const UInt8,
                        length: CFIndex) -> CFDataRef;
    pub fn CFDataCreateWithBytesNoCopy(allocator: CFAllocatorRef,
                                       bytes: *const UInt8, length: CFIndex,
                                       bytesDeallocator: CFAllocatorRef)
     -> CFDataRef;
    pub fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef)
     -> CFDataRef;
    pub fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex)
     -> CFMutableDataRef;
    pub fn CFDataCreateMutableCopy(allocator: CFAllocatorRef,
                                   capacity: CFIndex, theData: CFDataRef)
     -> CFMutableDataRef;
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
    pub fn CFDataGetBytes(theData: CFDataRef, range: CFRange,
                          buffer: *mut UInt8);
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex);
    pub fn CFDataIncreaseLength(theData: CFMutableDataRef,
                                extraLength: CFIndex);
    pub fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: *const UInt8,
                             length: CFIndex);
    pub fn CFDataReplaceBytes(theData: CFMutableDataRef, range: CFRange,
                              newBytes: *const UInt8, newLength: CFIndex);
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange);
    pub fn CFDataFind(theData: CFDataRef, dataToFind: CFDataRef,
                      searchRange: CFRange, compareOptions: CFDataSearchFlags)
     -> CFRange;
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
    pub fn CFDictionaryCreate(allocator: CFAllocatorRef,
                              keys: *mut *const ::libc::c_void,
                              values: *mut *const ::libc::c_void,
                              numValues: CFIndex,
                              keyCallBacks: *const CFDictionaryKeyCallBacks,
                              valueCallBacks:
                                  *const CFDictionaryValueCallBacks)
     -> CFDictionaryRef;
    pub fn CFDictionaryCreateCopy(allocator: CFAllocatorRef,
                                  theDict: CFDictionaryRef)
     -> CFDictionaryRef;
    pub fn CFDictionaryCreateMutable(allocator: CFAllocatorRef,
                                     capacity: CFIndex,
                                     keyCallBacks:
                                         *const CFDictionaryKeyCallBacks,
                                     valueCallBacks:
                                         *const CFDictionaryValueCallBacks)
     -> CFMutableDictionaryRef;
    pub fn CFDictionaryCreateMutableCopy(allocator: CFAllocatorRef,
                                         capacity: CFIndex,
                                         theDict: CFDictionaryRef)
     -> CFMutableDictionaryRef;
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
    pub fn CFDictionaryGetCountOfKey(theDict: CFDictionaryRef,
                                     key: *const ::libc::c_void) -> CFIndex;
    pub fn CFDictionaryGetCountOfValue(theDict: CFDictionaryRef,
                                       value: *const ::libc::c_void)
     -> CFIndex;
    pub fn CFDictionaryContainsKey(theDict: CFDictionaryRef,
                                   key: *const ::libc::c_void) -> Boolean;
    pub fn CFDictionaryContainsValue(theDict: CFDictionaryRef,
                                     value: *const ::libc::c_void) -> Boolean;
    pub fn CFDictionaryGetValue(theDict: CFDictionaryRef,
                                key: *const ::libc::c_void)
     -> *const ::libc::c_void;
    pub fn CFDictionaryGetValueIfPresent(theDict: CFDictionaryRef,
                                         key: *const ::libc::c_void,
                                         value: *mut *const ::libc::c_void)
     -> Boolean;
    pub fn CFDictionaryGetKeysAndValues(theDict: CFDictionaryRef,
                                        keys: *mut *const ::libc::c_void,
                                        values: *mut *const ::libc::c_void);
    pub fn CFDictionaryApplyFunction(theDict: CFDictionaryRef,
                                     applier: CFDictionaryApplierFunction,
                                     context: *mut ::libc::c_void);
    pub fn CFDictionaryAddValue(theDict: CFMutableDictionaryRef,
                                key: *const ::libc::c_void,
                                value: *const ::libc::c_void);
    pub fn CFDictionarySetValue(theDict: CFMutableDictionaryRef,
                                key: *const ::libc::c_void,
                                value: *const ::libc::c_void);
    pub fn CFDictionaryReplaceValue(theDict: CFMutableDictionaryRef,
                                    key: *const ::libc::c_void,
                                    value: *const ::libc::c_void);
    pub fn CFDictionaryRemoveValue(theDict: CFMutableDictionaryRef,
                                   key: *const ::libc::c_void);
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef);
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
    pub fn CFCharacterSetGetPredefined(theSetIdentifier:
                                           CFCharacterSetPredefinedSet)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateWithCharactersInRange(alloc: CFAllocatorRef,
                                                     theRange: CFRange)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateWithCharactersInString(alloc: CFAllocatorRef,
                                                      theString: CFStringRef)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateWithBitmapRepresentation(alloc: CFAllocatorRef,
                                                        theData: CFDataRef)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateInvertedSet(alloc: CFAllocatorRef,
                                           theSet: CFCharacterSetRef)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetIsSupersetOfSet(theSet: CFCharacterSetRef,
                                         theOtherset: CFCharacterSetRef)
     -> Boolean;
    pub fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef,
                                          thePlane: CFIndex) -> Boolean;
    pub fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef)
     -> CFMutableCharacterSetRef;
    pub fn CFCharacterSetCreateCopy(alloc: CFAllocatorRef,
                                    theSet: CFCharacterSetRef)
     -> CFCharacterSetRef;
    pub fn CFCharacterSetCreateMutableCopy(alloc: CFAllocatorRef,
                                           theSet: CFCharacterSetRef)
     -> CFMutableCharacterSetRef;
    pub fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef,
                                           theChar: UniChar) -> Boolean;
    pub fn CFCharacterSetIsLongCharacterMember(theSet: CFCharacterSetRef,
                                               theChar: UTF32Char) -> Boolean;
    pub fn CFCharacterSetCreateBitmapRepresentation(alloc: CFAllocatorRef,
                                                    theSet: CFCharacterSetRef)
     -> CFDataRef;
    pub fn CFCharacterSetAddCharactersInRange(theSet:
                                                  CFMutableCharacterSetRef,
                                              theRange: CFRange);
    pub fn CFCharacterSetRemoveCharactersInRange(theSet:
                                                     CFMutableCharacterSetRef,
                                                 theRange: CFRange);
    pub fn CFCharacterSetAddCharactersInString(theSet:
                                                   CFMutableCharacterSetRef,
                                               theString: CFStringRef);
    pub fn CFCharacterSetRemoveCharactersInString(theSet:
                                                      CFMutableCharacterSetRef,
                                                  theString: CFStringRef);
    pub fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef,
                               theOtherSet: CFCharacterSetRef);
    pub fn CFCharacterSetIntersect(theSet: CFMutableCharacterSetRef,
                                   theOtherSet: CFCharacterSetRef);
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef);
    pub fn CFLocaleGetTypeID() -> CFTypeID;
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator:
                                                                   CFAllocatorRef,
                                                               localeIdentifier:
                                                                   CFStringRef)
     -> CFStringRef;
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator:
                                                                 CFAllocatorRef,
                                                             localeIdentifier:
                                                                 CFStringRef)
     -> CFStringRef;
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator:
                                                                             CFAllocatorRef,
                                                                         lcode:
                                                                             LangCode,
                                                                         rcode:
                                                                             RegionCode)
     -> CFStringRef;
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator:
                                                                   CFAllocatorRef,
                                                               lcid: uint32_t)
     -> CFStringRef;
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier:
                                                                CFStringRef)
     -> uint32_t;
    pub fn CFLocaleGetLanguageCharacterDirection(isoLangCode: CFStringRef)
     -> CFLocaleLanguageDirection;
    pub fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef)
     -> CFLocaleLanguageDirection;
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(allocator:
                                                            CFAllocatorRef,
                                                        localeID: CFStringRef)
     -> CFDictionaryRef;
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(allocator:
                                                            CFAllocatorRef,
                                                        dictionary:
                                                            CFDictionaryRef)
     -> CFStringRef;
    pub fn CFLocaleCreate(allocator: CFAllocatorRef,
                          localeIdentifier: CFStringRef) -> CFLocaleRef;
    pub fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef)
     -> CFLocaleRef;
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFStringRef;
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFStringRef)
     -> CFTypeRef;
    pub fn CFLocaleCopyDisplayNameForPropertyValue(displayLocale: CFLocaleRef,
                                                   key: CFStringRef,
                                                   value: CFStringRef)
     -> CFStringRef;
    pub fn CFStringGetTypeID() -> CFTypeID;
    pub fn CFStringCreateWithPascalString(alloc: CFAllocatorRef,
                                          pStr: ConstStr255Param,
                                          encoding: CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringCreateWithCString(alloc: CFAllocatorRef,
                                     cStr: *const ::libc::c_char,
                                     encoding: CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringCreateWithBytes(alloc: CFAllocatorRef, bytes: *const UInt8,
                                   numBytes: CFIndex,
                                   encoding: CFStringEncoding,
                                   isExternalRepresentation: Boolean)
     -> CFStringRef;
    pub fn CFStringCreateWithCharacters(alloc: CFAllocatorRef,
                                        chars: *const UniChar,
                                        numChars: CFIndex) -> CFStringRef;
    pub fn CFStringCreateWithPascalStringNoCopy(alloc: CFAllocatorRef,
                                                pStr: ConstStr255Param,
                                                encoding: CFStringEncoding,
                                                contentsDeallocator:
                                                    CFAllocatorRef)
     -> CFStringRef;
    pub fn CFStringCreateWithCStringNoCopy(alloc: CFAllocatorRef,
                                           cStr: *const ::libc::c_char,
                                           encoding: CFStringEncoding,
                                           contentsDeallocator:
                                               CFAllocatorRef) -> CFStringRef;
    pub fn CFStringCreateWithBytesNoCopy(alloc: CFAllocatorRef,
                                         bytes: *const UInt8,
                                         numBytes: CFIndex,
                                         encoding: CFStringEncoding,
                                         isExternalRepresentation: Boolean,
                                         contentsDeallocator: CFAllocatorRef)
     -> CFStringRef;
    pub fn CFStringCreateWithCharactersNoCopy(alloc: CFAllocatorRef,
                                              chars: *const UniChar,
                                              numChars: CFIndex,
                                              contentsDeallocator:
                                                  CFAllocatorRef)
     -> CFStringRef;
    pub fn CFStringCreateWithSubstring(alloc: CFAllocatorRef,
                                       str: CFStringRef, range: CFRange)
     -> CFStringRef;
    pub fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef)
     -> CFStringRef;
    pub fn CFStringCreateWithFormat(alloc: CFAllocatorRef,
                                    formatOptions: CFDictionaryRef,
                                    format: CFStringRef, ...) -> CFStringRef;
    pub fn CFStringCreateWithFormatAndArguments(alloc: CFAllocatorRef,
                                                formatOptions:
                                                    CFDictionaryRef,
                                                format: CFStringRef,
                                                arguments: va_list)
     -> CFStringRef;
    pub fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex)
     -> CFMutableStringRef;
    pub fn CFStringCreateMutableCopy(alloc: CFAllocatorRef,
                                     maxLength: CFIndex,
                                     theString: CFStringRef)
     -> CFMutableStringRef;
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(alloc:
                                                                 CFAllocatorRef,
                                                             chars:
                                                                 *mut UniChar,
                                                             numChars:
                                                                 CFIndex,
                                                             capacity:
                                                                 CFIndex,
                                                             externalCharactersAllocator:
                                                                 CFAllocatorRef)
     -> CFMutableStringRef;
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
    pub fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex)
     -> UniChar;
    pub fn CFStringGetCharacters(theString: CFStringRef, range: CFRange,
                                 buffer: *mut UniChar);
    pub fn CFStringGetPascalString(theString: CFStringRef, buffer: StringPtr,
                                   bufferSize: CFIndex,
                                   encoding: CFStringEncoding) -> Boolean;
    pub fn CFStringGetCString(theString: CFStringRef,
                              buffer: *mut ::libc::c_char,
                              bufferSize: CFIndex, encoding: CFStringEncoding)
     -> Boolean;
    pub fn CFStringGetPascalStringPtr(theString: CFStringRef,
                                      encoding: CFStringEncoding)
     -> ConstStringPtr;
    pub fn CFStringGetCStringPtr(theString: CFStringRef,
                                 encoding: CFStringEncoding)
     -> *const ::libc::c_char;
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
    pub fn CFStringGetBytes(theString: CFStringRef, range: CFRange,
                            encoding: CFStringEncoding, lossByte: UInt8,
                            isExternalRepresentation: Boolean,
                            buffer: *mut UInt8, maxBufLen: CFIndex,
                            usedBufLen: *mut CFIndex) -> CFIndex;
    pub fn CFStringCreateFromExternalRepresentation(alloc: CFAllocatorRef,
                                                    data: CFDataRef,
                                                    encoding:
                                                        CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringCreateExternalRepresentation(alloc: CFAllocatorRef,
                                                theString: CFStringRef,
                                                encoding: CFStringEncoding,
                                                lossByte: UInt8) -> CFDataRef;
    pub fn CFStringGetSmallestEncoding(theString: CFStringRef)
     -> CFStringEncoding;
    pub fn CFStringGetFastestEncoding(theString: CFStringRef)
     -> CFStringEncoding;
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
    pub fn CFStringGetMaximumSizeForEncoding(length: CFIndex,
                                             encoding: CFStringEncoding)
     -> CFIndex;
    pub fn CFStringGetFileSystemRepresentation(string: CFStringRef,
                                               buffer: *mut ::libc::c_char,
                                               maxBufLen: CFIndex) -> Boolean;
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(string:
                                                                CFStringRef)
     -> CFIndex;
    pub fn CFStringCreateWithFileSystemRepresentation(alloc: CFAllocatorRef,
                                                      buffer:
                                                          *const ::libc::c_char)
     -> CFStringRef;
    pub fn CFStringCompareWithOptionsAndLocale(theString1: CFStringRef,
                                               theString2: CFStringRef,
                                               rangeToCompare: CFRange,
                                               compareOptions:
                                                   CFStringCompareFlags,
                                               locale: CFLocaleRef)
     -> CFComparisonResult;
    pub fn CFStringCompareWithOptions(theString1: CFStringRef,
                                      theString2: CFStringRef,
                                      rangeToCompare: CFRange,
                                      compareOptions: CFStringCompareFlags)
     -> CFComparisonResult;
    pub fn CFStringCompare(theString1: CFStringRef, theString2: CFStringRef,
                           compareOptions: CFStringCompareFlags)
     -> CFComparisonResult;
    pub fn CFStringFindWithOptionsAndLocale(theString: CFStringRef,
                                            stringToFind: CFStringRef,
                                            rangeToSearch: CFRange,
                                            searchOptions:
                                                CFStringCompareFlags,
                                            locale: CFLocaleRef,
                                            result: *mut CFRange) -> Boolean;
    pub fn CFStringFindWithOptions(theString: CFStringRef,
                                   stringToFind: CFStringRef,
                                   rangeToSearch: CFRange,
                                   searchOptions: CFStringCompareFlags,
                                   result: *mut CFRange) -> Boolean;
    pub fn CFStringCreateArrayWithFindResults(alloc: CFAllocatorRef,
                                              theString: CFStringRef,
                                              stringToFind: CFStringRef,
                                              rangeToSearch: CFRange,
                                              compareOptions:
                                                  CFStringCompareFlags)
     -> CFArrayRef;
    pub fn CFStringFind(theString: CFStringRef, stringToFind: CFStringRef,
                        compareOptions: CFStringCompareFlags) -> CFRange;
    pub fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef)
     -> Boolean;
    pub fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef)
     -> Boolean;
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(theString: CFStringRef,
                                                       theIndex: CFIndex)
     -> CFRange;
    pub fn CFStringFindCharacterFromSet(theString: CFStringRef,
                                        theSet: CFCharacterSetRef,
                                        rangeToSearch: CFRange,
                                        searchOptions: CFStringCompareFlags,
                                        result: *mut CFRange) -> Boolean;
    pub fn CFStringGetLineBounds(theString: CFStringRef, range: CFRange,
                                 lineBeginIndex: *mut CFIndex,
                                 lineEndIndex: *mut CFIndex,
                                 contentsEndIndex: *mut CFIndex);
    pub fn CFStringGetParagraphBounds(string: CFStringRef, range: CFRange,
                                      parBeginIndex: *mut CFIndex,
                                      parEndIndex: *mut CFIndex,
                                      contentsEndIndex: *mut CFIndex);
    pub fn CFStringGetHyphenationLocationBeforeIndex(string: CFStringRef,
                                                     location: CFIndex,
                                                     limitRange: CFRange,
                                                     options: CFOptionFlags,
                                                     locale: CFLocaleRef,
                                                     character:
                                                         *mut UTF32Char)
     -> CFIndex;
    pub fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef)
     -> Boolean;
    pub fn CFStringCreateByCombiningStrings(alloc: CFAllocatorRef,
                                            theArray: CFArrayRef,
                                            separatorString: CFStringRef)
     -> CFStringRef;
    pub fn CFStringCreateArrayBySeparatingStrings(alloc: CFAllocatorRef,
                                                  theString: CFStringRef,
                                                  separatorString:
                                                      CFStringRef)
     -> CFArrayRef;
    pub fn CFStringGetIntValue(str: CFStringRef) -> SInt32;
    pub fn CFStringGetDoubleValue(str: CFStringRef) -> ::libc::c_double;
    pub fn CFStringAppend(theString: CFMutableStringRef,
                          appendedString: CFStringRef);
    pub fn CFStringAppendCharacters(theString: CFMutableStringRef,
                                    chars: *const UniChar, numChars: CFIndex);
    pub fn CFStringAppendPascalString(theString: CFMutableStringRef,
                                      pStr: ConstStr255Param,
                                      encoding: CFStringEncoding);
    pub fn CFStringAppendCString(theString: CFMutableStringRef,
                                 cStr: *const ::libc::c_char,
                                 encoding: CFStringEncoding);
    pub fn CFStringAppendFormat(theString: CFMutableStringRef,
                                formatOptions: CFDictionaryRef,
                                format: CFStringRef, ...);
    pub fn CFStringAppendFormatAndArguments(theString: CFMutableStringRef,
                                            formatOptions: CFDictionaryRef,
                                            format: CFStringRef,
                                            arguments: va_list);
    pub fn CFStringInsert(str: CFMutableStringRef, idx: CFIndex,
                          insertedStr: CFStringRef);
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange);
    pub fn CFStringReplace(theString: CFMutableStringRef, range: CFRange,
                           replacement: CFStringRef);
    pub fn CFStringReplaceAll(theString: CFMutableStringRef,
                              replacement: CFStringRef);
    pub fn CFStringFindAndReplace(theString: CFMutableStringRef,
                                  stringToFind: CFStringRef,
                                  replacementString: CFStringRef,
                                  rangeToSearch: CFRange,
                                  compareOptions: CFStringCompareFlags)
     -> CFIndex;
    pub fn CFStringSetExternalCharactersNoCopy(theString: CFMutableStringRef,
                                               chars: *mut UniChar,
                                               length: CFIndex,
                                               capacity: CFIndex);
    pub fn CFStringPad(theString: CFMutableStringRef, padString: CFStringRef,
                       length: CFIndex, indexIntoPad: CFIndex);
    pub fn CFStringTrim(theString: CFMutableStringRef,
                        trimString: CFStringRef);
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef);
    pub fn CFStringLowercase(theString: CFMutableStringRef,
                             locale: CFLocaleRef);
    pub fn CFStringUppercase(theString: CFMutableStringRef,
                             locale: CFLocaleRef);
    pub fn CFStringCapitalize(theString: CFMutableStringRef,
                              locale: CFLocaleRef);
    pub fn CFStringNormalize(theString: CFMutableStringRef,
                             theForm: CFStringNormalizationForm);
    pub fn CFStringFold(theString: CFMutableStringRef,
                        theFlags: CFStringCompareFlags,
                        theLocale: CFLocaleRef);
    pub fn CFStringTransform(string: CFMutableStringRef, range: *mut CFRange,
                             transform: CFStringRef, reverse: Boolean)
     -> Boolean;
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringConvertEncodingToNSStringEncoding(encoding:
                                                         CFStringEncoding)
     -> ::libc::c_ulong;
    pub fn CFStringConvertNSStringEncodingToEncoding(encoding:
                                                         ::libc::c_ulong)
     -> CFStringEncoding;
    pub fn CFStringConvertEncodingToWindowsCodepage(encoding:
                                                        CFStringEncoding)
     -> UInt32;
    pub fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32)
     -> CFStringEncoding;
    pub fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef)
     -> CFStringEncoding;
    pub fn CFStringConvertEncodingToIANACharSetName(encoding:
                                                        CFStringEncoding)
     -> CFStringRef;
    pub fn CFStringGetMostCompatibleMacStringEncoding(encoding:
                                                          CFStringEncoding)
     -> CFStringEncoding;
    pub fn CFShow(obj: CFTypeRef);
    pub fn CFShowStr(str: CFStringRef);
    pub fn __CFStringMakeConstantString(cStr: *const ::libc::c_char)
     -> CFStringRef;
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFStringRef;
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFStringRef);
    pub fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFStringRef)
     -> CFAbsoluteTime;
    pub fn CFRunLoopRun();
    pub fn CFRunLoopRunInMode(mode: CFStringRef, seconds: CFTimeInterval,
                              returnAfterSourceHandled: Boolean) -> SInt32;
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef);
    pub fn CFRunLoopStop(rl: CFRunLoopRef);
    pub fn CFRunLoopPerformBlock(rl: CFRunLoopRef, mode: CFTypeRef,
                                 block: ::libc::c_void);
    pub fn CFRunLoopContainsSource(rl: CFRunLoopRef,
                                   source: CFRunLoopSourceRef,
                                   mode: CFStringRef) -> Boolean;
    pub fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef,
                              mode: CFStringRef);
    pub fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef,
                                 mode: CFStringRef);
    pub fn CFRunLoopContainsObserver(rl: CFRunLoopRef,
                                     observer: CFRunLoopObserverRef,
                                     mode: CFStringRef) -> Boolean;
    pub fn CFRunLoopAddObserver(rl: CFRunLoopRef,
                                observer: CFRunLoopObserverRef,
                                mode: CFStringRef);
    pub fn CFRunLoopRemoveObserver(rl: CFRunLoopRef,
                                   observer: CFRunLoopObserverRef,
                                   mode: CFStringRef);
    pub fn CFRunLoopContainsTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef,
                                  mode: CFStringRef) -> Boolean;
    pub fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef,
                             mode: CFStringRef);
    pub fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef,
                                mode: CFStringRef);
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
    pub fn CFRunLoopSourceCreate(allocator: CFAllocatorRef, order: CFIndex,
                                 context: *mut CFRunLoopSourceContext)
     -> CFRunLoopSourceRef;
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef);
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
    pub fn CFRunLoopSourceGetContext(source: CFRunLoopSourceRef,
                                     context: *mut CFRunLoopSourceContext);
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef);
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
    pub fn CFRunLoopObserverCreate(allocator: CFAllocatorRef,
                                   activities: CFOptionFlags,
                                   repeats: Boolean, order: CFIndex,
                                   callout: CFRunLoopObserverCallBack,
                                   context: *mut CFRunLoopObserverContext)
     -> CFRunLoopObserverRef;
    pub fn CFRunLoopObserverCreateWithHandler(allocator: CFAllocatorRef,
                                              activities: CFOptionFlags,
                                              repeats: Boolean,
                                              order: CFIndex,
                                              block: ::libc::c_void)
     -> CFRunLoopObserverRef;
    pub fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef)
     -> CFOptionFlags;
    pub fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef)
     -> Boolean;
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef)
     -> CFIndex;
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef);
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef)
     -> Boolean;
    pub fn CFRunLoopObserverGetContext(observer: CFRunLoopObserverRef,
                                       context:
                                           *mut CFRunLoopObserverContext);
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
    pub fn CFRunLoopTimerCreate(allocator: CFAllocatorRef,
                                fireDate: CFAbsoluteTime,
                                interval: CFTimeInterval,
                                flags: CFOptionFlags, order: CFIndex,
                                callout: CFRunLoopTimerCallBack,
                                context: *mut CFRunLoopTimerContext)
     -> CFRunLoopTimerRef;
    pub fn CFRunLoopTimerCreateWithHandler(allocator: CFAllocatorRef,
                                           fireDate: CFAbsoluteTime,
                                           interval: CFTimeInterval,
                                           flags: CFOptionFlags,
                                           order: CFIndex,
                                           block: ::libc::c_void)
     -> CFRunLoopTimerRef;
    pub fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef)
     -> CFAbsoluteTime;
    pub fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef,
                                         fireDate: CFAbsoluteTime);
    pub fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef)
     -> CFTimeInterval;
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef);
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
    pub fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef,
                                    context: *mut CFRunLoopTimerContext);
    pub fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef)
     -> CFTimeInterval;
    pub fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef,
                                      tolerance: CFTimeInterval);
    pub fn CFUUIDGetTypeID() -> CFTypeID;
    pub fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
    pub fn CFUUIDCreateWithBytes(alloc: CFAllocatorRef, byte0: UInt8,
                                 byte1: UInt8, byte2: UInt8, byte3: UInt8,
                                 byte4: UInt8, byte5: UInt8, byte6: UInt8,
                                 byte7: UInt8, byte8: UInt8, byte9: UInt8,
                                 byte10: UInt8, byte11: UInt8, byte12: UInt8,
                                 byte13: UInt8, byte14: UInt8, byte15: UInt8)
     -> CFUUIDRef;
    pub fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef)
     -> CFUUIDRef;
    pub fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef)
     -> CFStringRef;
    pub fn CFUUIDGetConstantUUIDWithBytes(alloc: CFAllocatorRef, byte0: UInt8,
                                          byte1: UInt8, byte2: UInt8,
                                          byte3: UInt8, byte4: UInt8,
                                          byte5: UInt8, byte6: UInt8,
                                          byte7: UInt8, byte8: UInt8,
                                          byte9: UInt8, byte10: UInt8,
                                          byte11: UInt8, byte12: UInt8,
                                          byte13: UInt8, byte14: UInt8,
                                          byte15: UInt8) -> CFUUIDRef;
    pub fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
    pub fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef,
                                     bytes: CFUUIDBytes) -> CFUUIDRef;
    pub fn _exit(arg1: ::libc::c_int);
    pub fn access(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn alarm(arg1: ::libc::c_uint) -> ::libc::c_uint;
    pub fn chdir(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn chown(arg1: *const ::libc::c_char, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn close(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn dup(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn dup2(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn execl(arg1: *const ::libc::c_char,
                 arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execle(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execlp(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execv(arg1: *const ::libc::c_char,
                 arg2: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execve(arg1: *const ::libc::c_char,
                  arg2: *const *mut ::libc::c_char,
                  arg3: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execvp(arg1: *const ::libc::c_char,
                  arg2: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fork() -> pid_t;
    pub fn fpathconf(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_long;
    pub fn getcwd(arg1: *mut ::libc::c_char, arg2: size_t)
     -> *mut ::libc::c_char;
    pub fn getegid() -> gid_t;
    pub fn geteuid() -> uid_t;
    pub fn getgid() -> gid_t;
    pub fn getgroups(arg1: ::libc::c_int, arg2: *mut gid_t) -> ::libc::c_int;
    pub fn getlogin() -> *mut ::libc::c_char;
    pub fn getpgrp() -> pid_t;
    pub fn getpid() -> pid_t;
    pub fn getppid() -> pid_t;
    pub fn getuid() -> uid_t;
    pub fn isatty(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn link(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn lseek(arg1: ::libc::c_int, arg2: off_t, arg3: ::libc::c_int)
     -> off_t;
    pub fn pathconf(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_long;
    pub fn pause() -> ::libc::c_int;
    pub fn pipe(arg1: [::libc::c_int, ..2u]) -> ::libc::c_int;
    pub fn read(arg1: ::libc::c_int, arg2: *mut ::libc::c_void, arg3: size_t)
     -> ssize_t;
    pub fn rmdir(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setgid(arg1: gid_t) -> ::libc::c_int;
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::libc::c_int;
    pub fn setsid() -> pid_t;
    pub fn setuid(arg1: uid_t) -> ::libc::c_int;
    pub fn sleep(arg1: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sysconf(arg1: ::libc::c_int) -> ::libc::c_long;
    pub fn tcgetpgrp(arg1: ::libc::c_int) -> pid_t;
    pub fn tcsetpgrp(arg1: ::libc::c_int, arg2: pid_t) -> ::libc::c_int;
    pub fn ttyname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn ttyname_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                     arg3: size_t) -> *mut ::libc::c_char;
    pub fn unlink(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn write(arg1: ::libc::c_int, arg2: *const ::libc::c_void,
                 arg3: size_t) -> ssize_t;
    pub fn confstr(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn getopt(arg1: ::libc::c_int, arg2: *const *mut ::libc::c_char,
                  arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn brk(arg1: *const ::libc::c_void) -> *mut ::libc::c_void;
    pub fn chroot(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn crypt(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctermid(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn encrypt(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn fchdir(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn gethostid() -> ::libc::c_long;
    pub fn getpgid(arg1: pid_t) -> pid_t;
    pub fn getsid(arg1: pid_t) -> pid_t;
    pub fn getdtablesize() -> ::libc::c_int;
    pub fn getpagesize() -> ::libc::c_int;
    pub fn getpass(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn getwd(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn lchown(arg1: *const ::libc::c_char, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn lockf(arg1: ::libc::c_int, arg2: ::libc::c_int, arg3: off_t)
     -> ::libc::c_int;
    pub fn nice(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn pread(arg1: ::libc::c_int, arg2: *mut ::libc::c_void, arg3: size_t,
                 arg4: off_t) -> ssize_t;
    pub fn pwrite(arg1: ::libc::c_int, arg2: *const ::libc::c_void,
                  arg3: size_t, arg4: off_t) -> ssize_t;
    pub fn sbrk(arg1: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn setpgrp(pid: pid_t, pgrp: pid_t) -> ::libc::c_int;
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::libc::c_int;
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::libc::c_int;
    pub fn swab(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                arg3: ssize_t);
    pub fn sync();
    pub fn truncate(arg1: *const ::libc::c_char, arg2: off_t)
     -> ::libc::c_int;
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
    pub fn usleep(arg1: useconds_t) -> ::libc::c_int;
    pub fn vfork() -> pid_t;
    pub fn fsync(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ftruncate(arg1: ::libc::c_int, arg2: off_t) -> ::libc::c_int;
    pub fn getlogin_r(arg1: *mut ::libc::c_char, arg2: size_t)
     -> ::libc::c_int;
    pub fn fchown(arg1: ::libc::c_int, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn gethostname(arg1: *mut ::libc::c_char, arg2: size_t)
     -> ::libc::c_int;
    pub fn readlink(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char,
                    arg3: size_t) -> ssize_t;
    pub fn setegid(arg1: gid_t) -> ::libc::c_int;
    pub fn seteuid(arg1: uid_t) -> ::libc::c_int;
    pub fn symlink(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn selrecord(selector: proc_t, arg1: *mut Struct_selinfo,
                     arg2: *mut ::libc::c_void);
    pub fn selwakeup(arg1: *mut Struct_selinfo);
    pub fn selthreadclear(arg1: *mut Struct_selinfo);
    pub fn _Exit(arg1: ::libc::c_int);
    pub fn accessx_np(arg1: *const Struct_accessx_descriptor, arg2: size_t,
                      arg3: *mut ::libc::c_int, arg4: uid_t) -> ::libc::c_int;
    pub fn acct(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn add_profil(arg1: *mut ::libc::c_char, arg2: size_t,
                      arg3: ::libc::c_ulong, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn endusershell();
    pub fn execvP(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                  arg3: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fflagstostr(arg1: ::libc::c_ulong) -> *mut ::libc::c_char;
    pub fn getdomainname(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getgrouplist(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                        arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn gethostuuid(arg1: uuid_t, arg2: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn getmode(arg1: *const ::libc::c_void, arg2: mode_t) -> mode_t;
    pub fn getpeereid(arg1: ::libc::c_int, arg2: *mut uid_t, arg3: *mut gid_t)
     -> ::libc::c_int;
    pub fn getsgroups_np(arg1: *mut ::libc::c_int, arg2: uuid_t)
     -> ::libc::c_int;
    pub fn getusershell() -> *mut ::libc::c_char;
    pub fn getwgroups_np(arg1: *mut ::libc::c_int, arg2: uuid_t)
     -> ::libc::c_int;
    pub fn initgroups(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn iruserok(arg1: ::libc::c_ulong, arg2: ::libc::c_int,
                    arg3: *const ::libc::c_char, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn iruserok_sa(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                       arg3: ::libc::c_int, arg4: *const ::libc::c_char,
                       arg5: *const ::libc::c_char) -> ::libc::c_int;
    pub fn issetugid() -> ::libc::c_int;
    pub fn mkdtemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mknod(arg1: *const ::libc::c_char, arg2: mode_t, arg3: dev_t)
     -> ::libc::c_int;
    pub fn mkpath_np(path: *const ::libc::c_char, omode: mode_t)
     -> ::libc::c_int;
    pub fn mkstemp(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mktemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn nfssvc(arg1: ::libc::c_int, arg2: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn profil(arg1: *mut ::libc::c_char, arg2: size_t,
                  arg3: ::libc::c_ulong, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::libc::c_int;
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t)
     -> ::libc::c_int;
    pub fn rcmd(arg1: *mut *mut ::libc::c_char, arg2: ::libc::c_int,
                arg3: *const ::libc::c_char, arg4: *const ::libc::c_char,
                arg5: *const ::libc::c_char, arg6: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn rcmd_af(arg1: *mut *mut ::libc::c_char, arg2: ::libc::c_int,
                   arg3: *const ::libc::c_char, arg4: *const ::libc::c_char,
                   arg5: *const ::libc::c_char, arg6: *mut ::libc::c_int,
                   arg7: ::libc::c_int) -> ::libc::c_int;
    pub fn reboot(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn revoke(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rresvport(arg1: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn rresvport_af(arg1: *mut ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ruserok(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                   arg3: *const ::libc::c_char, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn setdomainname(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setgroups(arg1: ::libc::c_int, arg2: *const gid_t)
     -> ::libc::c_int;
    pub fn sethostid(arg1: ::libc::c_long);
    pub fn sethostname(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setkey(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setlogin(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setmode(arg1: *const ::libc::c_char) -> *mut ::libc::c_void;
    pub fn setrgid(arg1: gid_t) -> ::libc::c_int;
    pub fn setruid(arg1: uid_t) -> ::libc::c_int;
    pub fn setsgroups_np(arg1: ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn setusershell();
    pub fn setwgroups_np(arg1: ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn strtofflags(arg1: *mut *mut ::libc::c_char,
                       arg2: *mut ::libc::c_ulong, arg3: *mut ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn swapon(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn syscall(arg1: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn ttyslot() -> ::libc::c_int;
    pub fn undelete(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn unwhiteout(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn valloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn getsubopt(arg1: *mut *mut ::libc::c_char,
                     arg2: *const *mut ::libc::c_char,
                     arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fgetattrlist(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                        arg3: *mut ::libc::c_void, arg4: size_t,
                        arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn fsetattrlist(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                        arg3: *mut ::libc::c_void, arg4: size_t,
                        arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn getattrlist(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_void,
                       arg3: *mut ::libc::c_void, arg4: size_t,
                       arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn setattrlist(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_void,
                       arg3: *mut ::libc::c_void, arg4: size_t,
                       arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn exchangedata(arg1: *const ::libc::c_char,
                        arg2: *const ::libc::c_char, arg3: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn getdirentriesattr(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                             arg3: *mut ::libc::c_void, arg4: size_t,
                             arg5: *mut ::libc::c_uint,
                             arg6: *mut ::libc::c_uint,
                             arg7: *mut ::libc::c_uint, arg8: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn searchfs(arg1: *const ::libc::c_char,
                    arg2: *mut Struct_fssearchblock,
                    arg3: *mut ::libc::c_ulong, arg4: ::libc::c_uint,
                    arg5: ::libc::c_uint, arg6: *mut Struct_searchstate)
     -> ::libc::c_int;
    pub fn fsctl(arg1: *const ::libc::c_char, arg2: ::libc::c_ulong,
                 arg3: *mut ::libc::c_void, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn ffsctl(arg1: ::libc::c_int, arg2: ::libc::c_ulong,
                  arg3: *mut ::libc::c_void, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn fsync_volume_np(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sync_volume_np(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn os_retain(object: *mut ::libc::c_void) -> *mut ::libc::c_void;
    pub fn os_release(object: *mut ::libc::c_void);
    pub fn dispatch_time(when: dispatch_time_t, delta: int64_t)
     -> dispatch_time_t;
    pub fn dispatch_walltime(when: *const Struct_timespec, delta: int64_t)
     -> dispatch_time_t;
    pub fn dispatch_retain(object: dispatch_object_t);
    pub fn dispatch_release(object: dispatch_object_t);
    pub fn dispatch_get_context(object: dispatch_object_t)
     -> *mut ::libc::c_void;
    pub fn dispatch_set_context(object: dispatch_object_t,
                                context: *mut ::libc::c_void);
    pub fn dispatch_set_finalizer_f(object: dispatch_object_t,
                                    finalizer: dispatch_function_t);
    pub fn dispatch_suspend(object: dispatch_object_t);
    pub fn dispatch_resume(object: dispatch_object_t);
    pub fn dispatch_wait(object: *mut ::libc::c_void,
                         timeout: dispatch_time_t) -> ::libc::c_long;
    pub fn dispatch_notify(object: *mut ::libc::c_void,
                           queue: dispatch_object_t,
                           notification_block: dispatch_block_t);
    pub fn dispatch_cancel(object: *mut ::libc::c_void);
    pub fn dispatch_testcancel(object: *mut ::libc::c_void) -> ::libc::c_long;
    pub fn dispatch_debug(object: dispatch_object_t,
                          message: *const ::libc::c_char, ...);
    pub fn dispatch_debugv(object: dispatch_object_t,
                           message: *const ::libc::c_char, ap: va_list);
    pub fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t);
    pub fn dispatch_async_f(queue: dispatch_queue_t,
                            context: *mut ::libc::c_void,
                            work: dispatch_function_t);
    pub fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t);
    pub fn dispatch_sync_f(queue: dispatch_queue_t,
                           context: *mut ::libc::c_void,
                           work: dispatch_function_t);
    pub fn dispatch_apply(iterations: size_t, queue: dispatch_queue_t,
                          block: ::libc::c_void);
    pub fn dispatch_apply_f(iterations: size_t, queue: dispatch_queue_t,
                            context: *mut ::libc::c_void,
                            work:
                                ::std::option::Option<extern "C" fn
                                                          (arg1:
                                                               *mut ::libc::c_void,
                                                           arg2: size_t)>);
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
    pub fn qos_class_self() -> qos_class_t;
    pub fn qos_class_main() -> qos_class_t;
    pub fn dispatch_get_global_queue(identifier: ::libc::c_long,
                                     flags: ::libc::c_ulong)
     -> dispatch_queue_t;
    pub fn dispatch_queue_attr_make_with_qos_class(attr:
                                                       dispatch_queue_attr_t,
                                                   qos_class:
                                                       dispatch_qos_class_t,
                                                   relative_priority:
                                                       ::libc::c_int)
     -> dispatch_queue_attr_t;
    pub fn dispatch_queue_create(label: *const ::libc::c_char,
                                 attr: dispatch_queue_attr_t)
     -> dispatch_queue_t;
    pub fn dispatch_queue_get_label(queue: dispatch_queue_t)
     -> *const ::libc::c_char;
    pub fn dispatch_queue_get_qos_class(queue: dispatch_queue_t,
                                        relative_priority_ptr:
                                            *mut ::libc::c_int)
     -> dispatch_qos_class_t;
    pub fn dispatch_set_target_queue(object: dispatch_object_t,
                                     queue: dispatch_queue_t);
    pub fn dispatch_main();
    pub fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t,
                          block: dispatch_block_t);
    pub fn dispatch_after_f(when: dispatch_time_t, queue: dispatch_queue_t,
                            context: *mut ::libc::c_void,
                            work: dispatch_function_t);
    pub fn dispatch_barrier_async(queue: dispatch_queue_t,
                                  block: dispatch_block_t);
    pub fn dispatch_barrier_async_f(queue: dispatch_queue_t,
                                    context: *mut ::libc::c_void,
                                    work: dispatch_function_t);
    pub fn dispatch_barrier_sync(queue: dispatch_queue_t,
                                 block: dispatch_block_t);
    pub fn dispatch_barrier_sync_f(queue: dispatch_queue_t,
                                   context: *mut ::libc::c_void,
                                   work: dispatch_function_t);
    pub fn dispatch_queue_set_specific(queue: dispatch_queue_t,
                                       key: *const ::libc::c_void,
                                       context: *mut ::libc::c_void,
                                       destructor: dispatch_function_t);
    pub fn dispatch_queue_get_specific(queue: dispatch_queue_t,
                                       key: *const ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn dispatch_get_specific(key: *const ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn dispatch_block_create(flags: dispatch_block_flags_t,
                                 block: dispatch_block_t) -> dispatch_block_t;
    pub fn dispatch_block_create_with_qos_class(flags: dispatch_block_flags_t,
                                                qos_class:
                                                    dispatch_qos_class_t,
                                                relative_priority:
                                                    ::libc::c_int,
                                                block: dispatch_block_t)
     -> dispatch_block_t;
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t,
                                  block: dispatch_block_t);
    pub fn dispatch_block_wait(block: dispatch_block_t,
                               timeout: dispatch_time_t) -> ::libc::c_long;
    pub fn dispatch_block_notify(block: dispatch_block_t,
                                 queue: dispatch_queue_t,
                                 notification_block: dispatch_block_t);
    pub fn dispatch_block_cancel(block: dispatch_block_t);
    pub fn dispatch_block_testcancel(block: dispatch_block_t)
     -> ::libc::c_long;
    pub fn mach_msg_overwrite(msg: *mut mach_msg_header_t,
                              option: mach_msg_option_t,
                              send_size: mach_msg_size_t,
                              rcv_size: mach_msg_size_t,
                              rcv_name: mach_port_name_t,
                              timeout: mach_msg_timeout_t,
                              notify: mach_port_name_t,
                              rcv_msg: *mut mach_msg_header_t,
                              rcv_limit: mach_msg_size_t)
     -> mach_msg_return_t;
    pub fn signal(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn
                                                (arg1: ::libc::c_int)>)
     -> ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)>;
    pub fn dispatch_source_create(_type: dispatch_source_type_t,
                                  handle: uintptr_t, mask: ::libc::c_ulong,
                                  queue: dispatch_queue_t)
     -> dispatch_source_t;
    pub fn dispatch_source_set_event_handler(source: dispatch_source_t,
                                             handler: dispatch_block_t);
    pub fn dispatch_source_set_event_handler_f(source: dispatch_source_t,
                                               handler: dispatch_function_t);
    pub fn dispatch_source_set_cancel_handler(source: dispatch_source_t,
                                              handler: dispatch_block_t);
    pub fn dispatch_source_set_cancel_handler_f(source: dispatch_source_t,
                                                handler: dispatch_function_t);
    pub fn dispatch_source_cancel(source: dispatch_source_t);
    pub fn dispatch_source_testcancel(source: dispatch_source_t)
     -> ::libc::c_long;
    pub fn dispatch_source_get_handle(source: dispatch_source_t) -> uintptr_t;
    pub fn dispatch_source_get_mask(source: dispatch_source_t)
     -> ::libc::c_ulong;
    pub fn dispatch_source_get_data(source: dispatch_source_t)
     -> ::libc::c_ulong;
    pub fn dispatch_source_merge_data(source: dispatch_source_t,
                                      value: ::libc::c_ulong);
    pub fn dispatch_source_set_timer(source: dispatch_source_t,
                                     start: dispatch_time_t,
                                     interval: uint64_t, leeway: uint64_t);
    pub fn dispatch_source_set_registration_handler(source: dispatch_source_t,
                                                    handler:
                                                        dispatch_block_t);
    pub fn dispatch_source_set_registration_handler_f(source:
                                                          dispatch_source_t,
                                                      handler:
                                                          dispatch_function_t);
    pub fn dispatch_group_create() -> dispatch_group_t;
    pub fn dispatch_group_async(group: dispatch_group_t,
                                queue: dispatch_queue_t,
                                block: dispatch_block_t);
    pub fn dispatch_group_async_f(group: dispatch_group_t,
                                  queue: dispatch_queue_t,
                                  context: *mut ::libc::c_void,
                                  work: dispatch_function_t);
    pub fn dispatch_group_wait(group: dispatch_group_t,
                               timeout: dispatch_time_t) -> ::libc::c_long;
    pub fn dispatch_group_notify(group: dispatch_group_t,
                                 queue: dispatch_queue_t,
                                 block: dispatch_block_t);
    pub fn dispatch_group_notify_f(group: dispatch_group_t,
                                   queue: dispatch_queue_t,
                                   context: *mut ::libc::c_void,
                                   work: dispatch_function_t);
    pub fn dispatch_group_enter(group: dispatch_group_t);
    pub fn dispatch_group_leave(group: dispatch_group_t);
    pub fn dispatch_semaphore_create(value: ::libc::c_long)
     -> dispatch_semaphore_t;
    pub fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t,
                                   timeout: dispatch_time_t)
     -> ::libc::c_long;
    pub fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t)
     -> ::libc::c_long;
    pub fn dispatch_once(predicate: *mut dispatch_once_t,
                         block: dispatch_block_t);
    pub fn dispatch_once_f(predicate: *mut dispatch_once_t,
                           context: *mut ::libc::c_void,
                           function: dispatch_function_t);
    pub fn dispatch_data_create(buffer: *const ::libc::c_void, size: size_t,
                                queue: dispatch_queue_t,
                                destructor: dispatch_block_t)
     -> dispatch_data_t;
    pub fn dispatch_data_get_size(data: dispatch_data_t) -> size_t;
    pub fn dispatch_data_create_map(data: dispatch_data_t,
                                    buffer_ptr: *mut *const ::libc::c_void,
                                    size_ptr: *mut size_t) -> dispatch_data_t;
    pub fn dispatch_data_create_concat(data1: dispatch_data_t,
                                       data2: dispatch_data_t)
     -> dispatch_data_t;
    pub fn dispatch_data_create_subrange(data: dispatch_data_t,
                                         offset: size_t, length: size_t)
     -> dispatch_data_t;
    pub fn dispatch_data_apply(data: dispatch_data_t,
                               applier: dispatch_data_applier_t) -> u8;
    pub fn dispatch_data_copy_region(data: dispatch_data_t, location: size_t,
                                     offset_ptr: *mut size_t)
     -> dispatch_data_t;
    pub fn dispatch_read(fd: dispatch_fd_t, length: size_t,
                         queue: dispatch_queue_t, handler: ::libc::c_void);
    pub fn dispatch_write(fd: dispatch_fd_t, data: dispatch_data_t,
                          queue: dispatch_queue_t, handler: ::libc::c_void);
    pub fn dispatch_io_create(_type: dispatch_io_type_t, fd: dispatch_fd_t,
                              queue: dispatch_queue_t,
                              cleanup_handler: ::libc::c_void)
     -> dispatch_io_t;
    pub fn dispatch_io_create_with_path(_type: dispatch_io_type_t,
                                        path: *const ::libc::c_char,
                                        oflag: ::libc::c_int, mode: mode_t,
                                        queue: dispatch_queue_t,
                                        cleanup_handler: ::libc::c_void)
     -> dispatch_io_t;
    pub fn dispatch_io_create_with_io(_type: dispatch_io_type_t,
                                      io: dispatch_io_t,
                                      queue: dispatch_queue_t,
                                      cleanup_handler: ::libc::c_void)
     -> dispatch_io_t;
    pub fn dispatch_io_read(channel: dispatch_io_t, offset: off_t,
                            length: size_t, queue: dispatch_queue_t,
                            io_handler: dispatch_io_handler_t);
    pub fn dispatch_io_write(channel: dispatch_io_t, offset: off_t,
                             data: dispatch_data_t, queue: dispatch_queue_t,
                             io_handler: dispatch_io_handler_t);
    pub fn dispatch_io_close(channel: dispatch_io_t,
                             flags: dispatch_io_close_flags_t);
    pub fn dispatch_io_barrier(channel: dispatch_io_t,
                               barrier: dispatch_block_t);
    pub fn dispatch_io_get_descriptor(channel: dispatch_io_t)
     -> dispatch_fd_t;
    pub fn dispatch_io_set_high_water(channel: dispatch_io_t,
                                      high_water: size_t);
    pub fn dispatch_io_set_low_water(channel: dispatch_io_t,
                                     low_water: size_t);
    pub fn dispatch_io_set_interval(channel: dispatch_io_t,
                                    interval: uint64_t,
                                    flags: dispatch_io_interval_flags_t);
    pub fn FSEventStreamCreate(allocator: CFAllocatorRef,
                               callback: FSEventStreamCallback,
                               context: *mut FSEventStreamContext,
                               pathsToWatch: CFArrayRef,
                               sinceWhen: FSEventStreamEventId,
                               latency: CFTimeInterval,
                               flags: FSEventStreamCreateFlags)
     -> FSEventStreamRef;
    pub fn FSEventStreamCreateRelativeToDevice(allocator: CFAllocatorRef,
                                               callback:
                                                   FSEventStreamCallback,
                                               context:
                                                   *mut FSEventStreamContext,
                                               deviceToWatch: dev_t,
                                               pathsToWatchRelativeToDevice:
                                                   CFArrayRef,
                                               sinceWhen:
                                                   FSEventStreamEventId,
                                               latency: CFTimeInterval,
                                               flags:
                                                   FSEventStreamCreateFlags)
     -> FSEventStreamRef;
    pub fn FSEventStreamGetLatestEventId(streamRef: ConstFSEventStreamRef)
     -> FSEventStreamEventId;
    pub fn FSEventStreamGetDeviceBeingWatched(streamRef:
                                                  ConstFSEventStreamRef)
     -> dev_t;
    pub fn FSEventStreamCopyPathsBeingWatched(streamRef:
                                                  ConstFSEventStreamRef)
     -> CFArrayRef;
    pub fn FSEventsGetCurrentEventId() -> FSEventStreamEventId;
    pub fn FSEventsCopyUUIDForDevice(dev: dev_t) -> CFUUIDRef;
    pub fn FSEventsGetLastEventIdForDeviceBeforeTime(dev: dev_t,
                                                     time: CFAbsoluteTime)
     -> FSEventStreamEventId;
    pub fn FSEventsPurgeEventsForDeviceUpToEventId(dev: dev_t,
                                                   eventId:
                                                       FSEventStreamEventId)
     -> Boolean;
    pub fn FSEventStreamRetain(streamRef: FSEventStreamRef);
    pub fn FSEventStreamRelease(streamRef: FSEventStreamRef);
    pub fn FSEventStreamScheduleWithRunLoop(streamRef: FSEventStreamRef,
                                            runLoop: CFRunLoopRef,
                                            runLoopMode: CFStringRef);
    pub fn FSEventStreamUnscheduleFromRunLoop(streamRef: FSEventStreamRef,
                                              runLoop: CFRunLoopRef,
                                              runLoopMode: CFStringRef);
    pub fn FSEventStreamSetDispatchQueue(streamRef: FSEventStreamRef,
                                         q: dispatch_queue_t);
    pub fn FSEventStreamInvalidate(streamRef: FSEventStreamRef);
    pub fn FSEventStreamStart(streamRef: FSEventStreamRef) -> Boolean;
    pub fn FSEventStreamFlushAsync(streamRef: FSEventStreamRef)
     -> FSEventStreamEventId;
    pub fn FSEventStreamFlushSync(streamRef: FSEventStreamRef);
    pub fn FSEventStreamStop(streamRef: FSEventStreamRef);
    pub fn FSEventStreamShow(streamRef: ConstFSEventStreamRef);
    pub fn FSEventStreamCopyDescription(streamRef: ConstFSEventStreamRef)
     -> CFStringRef;
    pub fn FSEventStreamSetExclusionPaths(streamRef: FSEventStreamRef,
                                          pathsToExclude: CFArrayRef)
     -> Boolean;
}
